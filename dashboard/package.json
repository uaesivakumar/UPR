# ---------- BUILD STAGE ----------
FROM node:20-alpine AS build
WORKDIR /app

# --- Root (server) deps ---
# Copy only manifests first for better layer caching
COPY package*.json ./
# Use install (not ci) since you just regenerated the server lockfile
RUN npm install --no-audit --no-fund

# Copy server + scripts
COPY server.js ./server.js
COPY scripts/ ./scripts

# --- Frontend (dashboard) deps & build ---
WORKDIR /app/dashboard
# Copy dashboard manifests first (to leverage cache)
COPY dashboard/package*.json ./

# Prefer reproducible installs; if lock mismatch occurs, fall back to install
RUN npm ci || npm install --no-audit --no-fund

# Now copy the rest of the dashboard source
COPY dashboard/ ./

# Build the dashboard (Vite)
RUN npm run build

# ---------- RUNTIME STAGE ----------
FROM node:20-alpine AS runtime
WORKDIR /app

# Healthcheck tool
RUN apk add --no-cache curl

# Copy server runtime artifacts
COPY --from=build /app/node_modules ./node_modules
COPY --from=build /app/package*.json ./
COPY --from=build /app/server.js ./server.js
COPY --from=build /app/scripts ./scripts

# Copy built dashboard (no dashboard/node_modules needed at runtime)
COPY --from=build /app/dashboard/dist ./dashboard/dist

ENV NODE_ENV=production
EXPOSE 10000

# Healthcheck calls your /health endpoint
HEALTHCHECK --interval=30s --timeout=5s --retries=5 \
  CMD curl -fsS "http://localhost:${PORT:-10000}/health" || exit 1

# Start: auto-seed (no-op if table already has rows), then run server
CMD ["sh", "-c", "node scripts/ensure-seed.js && node server.js"]
