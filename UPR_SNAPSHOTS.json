{
  "generated": "2025-09-20T11:48:41Z",
  "generated_human": "Sat, 20 Sep 2025 11:48:41 GMT",
  "branch": "main",
  "commit": "96b6063",
  "package": "upr-dashboard",
  "package_dependencies": {
    "bcryptjs": "^3.0.2",
    "cors": "^2.8.5",
    "express": "^4.21.2",
    "jsonwebtoken": "^9.0.2",
    "pg": "^8.16.3",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^7.8.2",
    "@vitejs/plugin-react": "^4.3.1",
    "vite": "^5.4.8"
  },
  "package_scripts": {
    "dev": "vite",
    "build": "vite build --logLevel debug",
    "preview": "vite preview --port 5173",
    "checkpoint": "node scripts/generate_checkpoint.mjs",
    "snapshot:bundle": "node scripts/bundle_snapshot.mjs"
  },
  "files": [
    {
      "path": "dashboard/src/features/enrichment/CompanySidebarCard.jsx",
      "size": 1540,
      "mtime": "2025-09-14T09:40:59.993Z",
      "sha256": "de3680a35505cbba27ff64f6a7606a35519c26d131a44ce173d07742c82eddd1",
      "imports": [
        "import React from \"react\";"
      ],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "import React from \"react\";\n\nfunction Row({ label, value }) {\n  return (\n    <div className=\"flex items-start justify-between gap-3 py-1\">\n      <div className=\"text-[11px] uppercase tracking-wide text-gray-400 w-20 shrink-0\">{label}</div>\n      <div className=\"text-sm break-words\">{value ?? \"—\"}</div>\n    </div>\n  );\n}\n\nfunction linkOrText(url) {\n  if (!url) return \"—\";\n  const safe = String(url).startsWith(\"http\") ? url : `https://${url}`;\n  return (\n    <a className=\"underline\" href={safe} target=\"_blank\" rel=\"noreferrer\">\n      {url}\n    </a>\n  );\n}\n\n/** Compact company card shown inside the left Sidebar (under the menu). */\nexport default function CompanySidebarCard({ company }) {\n  if (!company) return null;\n  return (\n    <div className=\"mt-4 bg-white rounded-xl border border-gray-200 p-3 shadow-sm\">\n      <div className=\"text-sm font-semibold text-gray-900 mb-1\">Company</div>\n      <div className=\"text-sm text-gray-700\">\n        <Row label=\"Name\" value={company.name || \"—\"} />\n        <Row label=\"Website\" value={linkOrText(company.website)} />\n        <Row label=\"LinkedIn\" value={linkOrText(company.linkedin)} />\n        <Row label=\"HQ\" value={company.hq || \"—\"} />\n        {company.industry && <Row label=\"Industry\" value={company.industry} />}\n        {company.size && <Row label=\"Size\" value={company.size} />}\n        {Array.isArray(company.locations) && company.locations.length > 0 && (\n          <Row label=\"Locations\" value={company.locations.join(\", \")} />\n        )}\n      </div>\n    </div>\n  );",
      "tail": "    </a>\n  );\n}\n\n/** Compact company card shown inside the left Sidebar (under the menu). */\nexport default function CompanySidebarCard({ company }) {\n  if (!company) return null;\n  return (\n    <div className=\"mt-4 bg-white rounded-xl border border-gray-200 p-3 shadow-sm\">\n      <div className=\"text-sm font-semibold text-gray-900 mb-1\">Company</div>\n      <div className=\"text-sm text-gray-700\">\n        <Row label=\"Name\" value={company.name || \"—\"} />\n        <Row label=\"Website\" value={linkOrText(company.website)} />\n        <Row label=\"LinkedIn\" value={linkOrText(company.linkedin)} />\n        <Row label=\"HQ\" value={company.hq || \"—\"} />\n        {company.industry && <Row label=\"Industry\" value={company.industry} />}\n        {company.size && <Row label=\"Size\" value={company.size} />}\n        {Array.isArray(company.locations) && company.locations.length > 0 && (\n          <Row label=\"Locations\" value={company.locations.join(\", \")} />\n        )}\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "path": "dashboard/src/features/enrichment/EnrichmentView.jsx",
      "size": 15871,
      "mtime": "2025-09-19T14:58:16.542Z",
      "sha256": "42be6e3539f9db82c761279c930563d7a2b6bc4c518f956e9a330a5b42598e0f",
      "imports": [
        "import { useEffect, useMemo, useState } from \"react\";",
        "import { authFetch } from \"../../utils/auth\";"
      ],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "import { useEffect, useMemo, useState } from \"react\";\nimport { authFetch } from \"../../utils/auth\";\n\nexport default function EnrichmentView() {\n  const [query, setQuery] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [err, setErr] = useState(\"\");\n\n  const [company, setCompany] = useState(null); // left sidebar company (LLM guess or selected)\n  const [quality, setQuality] = useState(null);\n  const [timings, setTimings] = useState({}); // { llm_ms, provider_ms, smtp_ms }\n\n  const [rows, setRows] = useState([]);\n  const [selected, setSelected] = useState({}); // id->bool\n  const [savingCompanyId, setSavingCompanyId] = useState(\"\"); // when we need to save into an existing company\n  const [companiesForSelect, setCompaniesForSelect] = useState([]);\n\n  // status lights\n  const [status, setStatus] = useState({ data: \"live\", db_ok: true, llm_ok: true });\n\n  // Listen for selection broadcasted from Companies page (if user clicks a row there)\n  useEffect(() => {\n    const handler = (e) => {\n      const c = e.detail || null;\n      if (c) {\n        setCompany({\n          name: c.name,\n          domain: c.domain || (c.website_url ? tryUrlToDomain(c.website_url) : null),\n          website_url: c.website_url || null,\n          linkedin_url: c.linkedin_url || null,\n          hq: c.hq || null,\n          industry: c.industry || null,\n          size: c.size || null,\n          mode: \"Selected\",\n        });\n        setSavingCompanyId(c.id);\n      }\n    };\n    window.addEventListener(\"upr:companySidebar\", handler);\n    return () => window.removeEventListener(\"upr:companySidebar\", handler);",
      "tail": "function Th({ children }) {\n  return <th className=\"px-3 py-3 text-left text-xs font-semibold uppercase tracking-wide text-gray-500\">{children}</th>;\n}\nfunction Td({ children, className = \"\" }) {\n  return <td className={`px-3 py-3 align-top ${className}`}>{children}</td>;\n}\nfunction Badge({ children }) {\n  return <span className=\"inline-flex items-center rounded-full bg-gray-100 px-2.5 py-0.5 text-xs font-medium text-gray-700\">{children}</span>;\n}\nfunction Field({ label, children }) {\n  return (\n    <div className=\"flex items-start justify-between\">\n      <div className=\"text-xs text-gray-500 w-24\">{label}</div>\n      <div className=\"text-gray-800 max-w-[12rem] text-right\">{children}</div>\n    </div>\n  );\n}\n\n/* ---------------- utils ---------------- */\nfunction crop(s, n) { s = String(s || \"\"); return s.length > n ? s.slice(0, n - 1) + \"…\" : s; }\nfunction tryUrlToDomain(u) {\n  try { return new URL(u.startsWith(\"http\") ? u : `https://${u}`).hostname.replace(/^www\\./, \"\"); } catch { return null; }\n}\nfunction fmtMs(v) { if (!v && v !== 0) return \"\"; return `${v}ms`; }\n"
    },
    {
      "path": "dashboard/src/features/enrichment/LLMStatus.jsx",
      "size": 1498,
      "mtime": "2025-09-14T09:40:51.466Z",
      "sha256": "6e8c983aa0b97f34fec375fec3c50af4587ba397204a20b08fa379ee48d2bce4",
      "imports": [
        "import React from \"react\";"
      ],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "import React from \"react\";\n\n/** Always-visible LLM status pill (idle → running → ok/error). */\nexport default function LLMStatus({ status = \"idle\", model = null, durationMs = null, errorText = null }) {\n  const tone =\n    {\n      idle: \"bg-gray-100 text-gray-700 border border-gray-200\",\n      running: \"bg-blue-50 text-blue-700 border border-blue-200\",\n      ok: \"bg-green-50 text-green-700 border border-green-200\",\n      error: \"bg-red-50 text-red-700 border border-red-200\",\n    }[status] || \"bg-gray-100 text-gray-700 border border-gray-200\";\n\n  return (\n    <div className=\"mb-4 flex items-center justify-between\">\n      <div className={`inline-flex items-center gap-2 px-3 py-1 rounded-full text-sm ${tone}`}>\n        <span\n          className={`inline-block w-2 h-2 rounded-full ${\n            status === \"running\" ? \"animate-pulse bg-current opacity-90\" : \"bg-current opacity-60\"\n          }`}\n        />\n        <span className=\"font-medium\">LLM</span>\n        <span className=\"opacity-80\">\n          {status === \"idle\" && \"idle\"}\n          {status === \"running\" && \"working…\"}\n          {status === \"ok\" && (model || \"ready\")}\n          {status === \"error\" && \"error\"}\n        </span>\n        {status === \"ok\" && typeof durationMs === \"number\" && (\n          <span className=\"opacity-70\">• {Math.max(0, Math.round(durationMs))} ms</span>\n        )}\n      </div>\n      {status === \"error\" && errorText && <div className=\"text-sm text-red-700\">{errorText}</div>}\n    </div>\n  );\n}\n",
      "tail": "\n  return (\n    <div className=\"mb-4 flex items-center justify-between\">\n      <div className={`inline-flex items-center gap-2 px-3 py-1 rounded-full text-sm ${tone}`}>\n        <span\n          className={`inline-block w-2 h-2 rounded-full ${\n            status === \"running\" ? \"animate-pulse bg-current opacity-90\" : \"bg-current opacity-60\"\n          }`}\n        />\n        <span className=\"font-medium\">LLM</span>\n        <span className=\"opacity-80\">\n          {status === \"idle\" && \"idle\"}\n          {status === \"running\" && \"working…\"}\n          {status === \"ok\" && (model || \"ready\")}\n          {status === \"error\" && \"error\"}\n        </span>\n        {status === \"ok\" && typeof durationMs === \"number\" && (\n          <span className=\"opacity-70\">• {Math.max(0, Math.round(durationMs))} ms</span>\n        )}\n      </div>\n      {status === \"error\" && errorText && <div className=\"text-sm text-red-700\">{errorText}</div>}\n    </div>\n  );\n}\n"
    },
    {
      "path": "dashboard/src/pages/Admin.jsx",
      "size": 6749,
      "mtime": "2025-09-19T19:41:50.688Z",
      "sha256": "117cd39d4a05b474c4d2e63c4d5893a5a5a5be5fdadf2fd2c7f3c5bcfb712245",
      "imports": [
        "import { useEffect, useState } from \"react\";",
        "import { authFetch, logout } from \"../utils/auth\";"
      ],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "// dashboard/src/pages/Admin.jsx\nimport { useEffect, useState } from \"react\";\nimport { authFetch, logout } from \"../utils/auth\";\n\nexport default function Admin() {\n  const [verifyMsg, setVerifyMsg] = useState(\"\");\n  const [busy, setBusy] = useState(false);\n\n  // demo payloads\n  const [enrichmentJson, setEnrichmentJson] = useState(() =>\n    JSON.stringify(\n      {\n        company: {\n          name: \"Acme Corp\",\n          type: \"Private\",\n          locations: [\"Dubai\"],\n          website_url: \"https://acme.example\",\n          linkedin_url: \"https://www.linkedin.com/company/acme\",\n        },\n        contact: {\n          name: \"Jane Doe\",\n          designation: \"HR Director\",\n          linkedin_url: \"https://www.linkedin.com/in/janedoe\",\n          location: \"Dubai\",\n          email: \"jane.doe@acme.example\",\n          email_status: \"validated\",\n        },\n        status: \"New\",\n        notes: \"Saved from Admin page\",\n      },\n      null,\n      2\n    )\n  );\n\n  const [bulkJson, setBulkJson] = useState(() =>\n    JSON.stringify(\n      [\n        {\n          company: {",
      "tail": "          value={bulkJson}\n          onChange={(e) => setBulkJson(e.target.value)}\n        />\n        <div className=\"flex justify-end\">\n          <button\n            onClick={bulkImport}\n            disabled={busy}\n            className=\"rounded-lg bg-gray-900 text-white px-3 py-1.5 text-sm hover:bg-gray-800 disabled:opacity-60\"\n          >\n            Import\n          </button>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nasync function safeJson(res) {\n  try {\n    return await res.json();\n  } catch {\n    return null;\n  }\n}\n"
    },
    {
      "path": "dashboard/src/pages/AdminDashboard.jsx",
      "size": 1583,
      "mtime": "2025-09-08T15:40:26.380Z",
      "sha256": "1554999347843e970b24ecc4b591fe14e118a4eccfbcdfe5e008440e5dfcc61b",
      "imports": [
        "import React from \"react\";",
        "import { useAuth } from \"../lib/AuthContext\";",
        "import { Button } from \"@/components/ui/button\";"
      ],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "import React from \"react\";\nimport { useAuth } from \"../lib/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\n\nconst AdminDashboard = () => {\n  const { logout } = useAuth();\n\n  return (\n    <div className=\"min-h-screen flex flex-col items-center justify-center bg-gray-50 p-4\">\n      <div className=\"bg-white rounded-2xl shadow-md w-full max-w-4xl p-6\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <h1 className=\"text-2xl font-bold text-gray-800\">Admin Dashboard</h1>\n          <Button variant=\"outline\" onClick={logout}>\n            Logout\n          </Button>\n        </div>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n          <div className=\"p-4 rounded-xl shadow bg-white border\">\n            <h2 className=\"text-lg font-semibold\">Companies Tracked</h2>\n            <p className=\"text-3xl font-bold text-blue-600\">132</p>\n          </div>\n          <div className=\"p-4 rounded-xl shadow bg-white border\">\n            <h2 className=\"text-lg font-semibold\">Leads Identified</h2>\n            <p className=\"text-3xl font-bold text-green-600\">29</p>\n          </div>\n          <div className=\"p-4 rounded-xl shadow bg-white border\">\n            <h2 className=\"text-lg font-semibold\">Emails Sent</h2>\n            <p className=\"text-3xl font-bold text-purple-600\">47</p>\n          </div>\n        </div>\n        <div className=\"mt-8 text-gray-500 text-sm text-center\">\n          Data auto-updated by AI agent | UAE Premium Radar\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminDashboard;\n",
      "tail": "        </div>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n          <div className=\"p-4 rounded-xl shadow bg-white border\">\n            <h2 className=\"text-lg font-semibold\">Companies Tracked</h2>\n            <p className=\"text-3xl font-bold text-blue-600\">132</p>\n          </div>\n          <div className=\"p-4 rounded-xl shadow bg-white border\">\n            <h2 className=\"text-lg font-semibold\">Leads Identified</h2>\n            <p className=\"text-3xl font-bold text-green-600\">29</p>\n          </div>\n          <div className=\"p-4 rounded-xl shadow bg-white border\">\n            <h2 className=\"text-lg font-semibold\">Emails Sent</h2>\n            <p className=\"text-3xl font-bold text-purple-600\">47</p>\n          </div>\n        </div>\n        <div className=\"mt-8 text-gray-500 text-sm text-center\">\n          Data auto-updated by AI agent | UAE Premium Radar\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminDashboard;\n"
    },
    {
      "path": "dashboard/src/pages/CompaniesPage.jsx",
      "size": 7940,
      "mtime": "2025-09-19T09:52:07.726Z",
      "sha256": "32f200eab28aacb689e234083216a1fc0f792cd595e5c514371a221b4d8740c4",
      "imports": [
        "import { useEffect, useMemo, useState } from \"react\";",
        "import { authFetch } from \"../utils/auth\";"
      ],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "// dashboard/src/pages/CompaniesPage.jsx\nimport { useEffect, useMemo, useState } from \"react\";\nimport { authFetch } from \"../utils/auth\";\n\n// Keep these in sync with backend validators (utils/validators.js)\nconst TYPE_OPTIONS = [\"ALE\", \"NON_ALE\", \"Good Coded\"];\nconst STATUS_OPTIONS = [\"New\", \"Contacted\", \"Response Received\", \"Converted\", \"Declined\"];\nconst LOCATION_OPTIONS = [\"Abu Dhabi\", \"Dubai\", \"Sharjah\"];\n\nexport default function CompaniesPage() {\n  const [query, setQuery] = useState(\"\");\n  const [type, setType] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [rows, setRows] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [err, setErr] = useState(\"\");\n\n  const qs = useMemo(() => {\n    const p = new URLSearchParams();\n    if (query.trim()) p.set(\"search\", query.trim());\n    if (type) p.set(\"type\", type);\n    if (status) p.set(\"status\", status);\n    if (location) p.set(\"location\", location);\n    p.set(\"sort\", \"created_at.desc\");\n    return p.toString();\n  }, [query, type, status, location]);\n\n  useEffect(() => {\n    let abort = false;\n    (async () => {\n      setLoading(true);\n      setErr(\"\");\n      try {\n        const res = await authFetch(`/api/companies?${qs}`);\n        const json = await res.json();\n        if (!res.ok || !json.ok) throw new Error(json.error || \"Request failed\");\n        if (!abort) setRows(Array.isArray(json.data) ? json.data : []);\n      } catch (e) {\n        if (!abort) {",
      "tail": "  );\n}\n\nfunction Select({ value, onChange, placeholder, options }) {\n  return (\n    <div className=\"relative\">\n      <select\n        value={value}\n        onChange={(e) => onChange(e.target.value)}\n        className=\"appearance-none px-3 py-2 pr-8 rounded-xl border border-gray-300 bg-gray-100 text-gray-800 text-sm focus:outline-none focus:ring-2 focus:ring-gray-900/10\"\n      >\n        <option value=\"\">{placeholder}</option>\n        {options.map((opt) => (\n          <option key={opt} value={opt}>\n            {opt}\n          </option>\n        ))}\n      </select>\n      <div className=\"pointer-events-none absolute right-2 top-1/2 -translate-y-1/2 text-gray-500\">\n        ▼\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "path": "dashboard/src/pages/DashboardHome.jsx",
      "size": 7042,
      "mtime": "2025-09-20T06:11:17.256Z",
      "sha256": "c7aabcad134edf5c87cf014212770d93ebbfc1bdaaaaa6035784391cca898540",
      "imports": [
        "import { useEffect, useState } from \"react\";",
        "import { useNavigate } from \"react-router-dom\";",
        "import { authFetch } from \"../utils/auth\";"
      ],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "// dashboard/src/pages/DashboardHome.jsx\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { authFetch } from \"../utils/auth\";\n\nfunction num(n) {\n  const v = Number(n || 0);\n  return isNaN(v) ? 0 : v;\n}\nfunction fmtDT(v) {\n  if (!v) return \"—\";\n  try {\n    const d = new Date(v);\n    return d.toLocaleString();\n  } catch {\n    return String(v);\n  }\n}\nfunction Badge({ children, tone = \"gray\" }) {\n  const tones = {\n    gray: \"bg-gray-100 text-gray-700\",\n    blue: \"bg-blue-100 text-blue-800\",\n    green: \"bg-green-100 text-green-800\",\n    amber: \"bg-amber-100 text-amber-800\",\n  };\n  return (\n    <span className={`text-xs px-2 py-1 rounded-full ${tones[tone] || tones.gray}`}>\n      {children}\n    </span>\n  );\n}\n\nexport default function DashboardHome() {\n  const nav = useNavigate();\n  const [loading, setLoading] = useState(true);\n  const [err, setErr] = useState(null);\n  const [stats, setStats] = useState(null);\n\n  useEffect(() => {\n    let mounted = true;",
      "tail": "                </tr>\n              </thead>\n              <tbody>\n                {stats.top_companies.map((c, i) => (\n                  <tr key={c.id || c.name || i} className=\"border-top border-gray-200\">\n                    <td className=\"px-5 py-2\">{c.name || \"—\"}</td>\n                    <td className=\"px-5 py-2\">\n                      {Array.isArray(c.locations) && c.locations.length\n                        ? c.locations.join(\", \")\n                        : c.location || \"—\"}\n                    </td>\n                    <td className=\"px-5 py-2\">{c.type || \"—\"}</td>\n                    <td className=\"px-5 py-2\">{num(c.qscore)}</td>\n                    <td className=\"px-5 py-2\">{fmtDT(c.created_at)}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </section>\n      )}\n    </div>\n  );\n}\n"
    },
    {
      "path": "dashboard/src/pages/EnrichmentPage.jsx",
      "size": 18132,
      "mtime": "2025-09-20T11:10:32.000Z",
      "sha256": "b4ac2f03d5fac838797630d774c6a3706cf8eb2f342aa6d94dde03f02e2751e1",
      "imports": [
        "import { useEffect, useMemo, useRef, useState } from \"react\";",
        "import { authFetch } from \"../utils/auth\";"
      ],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "// dashboard/src/pages/EnrichmentPage.jsx\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport { authFetch } from \"../utils/auth\";\n\nfunction Pill({ ok = true, label, ms }) {\n  return (\n    <span\n      className={`inline-flex items-center gap-2 rounded-full border px-3 py-1 text-xs ${\n        ok\n          ? \"border-green-200 bg-green-50 text-green-700\"\n          : \"border-gray-200 bg-gray-50 text-gray-600\"\n      }`}\n    >\n      <span className={`h-2 w-2 rounded-full ${ok ? \"bg-green-500\" : \"bg-gray-400\"}`} />\n      {label}\n      {typeof ms === \"number\" ? ` • ${ms}ms` : \"\"}\n    </span>\n  );\n}\n\nfunction Field({ label, children }) {\n  return (\n    <div>\n      <div className=\"mb-1 text-sm text-gray-700\">{label}</div>\n      {children}\n    </div>\n  );\n}\n\nexport default function EnrichmentPage() {\n  const [q, setQ] = useState(\"\");\n  const [rows, setRows] = useState([]);\n  const [err, setErr] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [summary, setSummary] = useState(null); // timings, provider, company_guess, quality\n\n  // status chips (optional)\n  const [dbOk, setDbOk] = useState(true);\n  const [llmOk, setLlmOk] = useState(true);\n  const [dataSource, setDataSource] = useState(\"live\");",
      "tail": "                  Cancel\n                </button>\n                <button\n                  className=\"rounded bg-gray-900 px-4 py-2 font-medium text-white\"\n                  onClick={() => {\n                    setFixOpen(false);\n                    run({\n                      name: fixName,\n                      domain: fixDomain,\n                      linkedin_url: fixLinkedIn,\n                      parent: fixParent,\n                    });\n                  }}\n                >\n                  Apply &amp; Re-run\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"
    },
    {
      "path": "dashboard/src/pages/HRLeads.jsx",
      "size": 4089,
      "mtime": "2025-09-13T12:55:59.827Z",
      "sha256": "1acfb4e8704613b70f6638ceb53340ed9b4c53c6db2ed627cae38901199aec4c",
      "imports": [
        "import { useEffect, useMemo, useState } from \"react\";"
      ],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "// dashboard/src/pages/HRLeads.jsx\nimport { useEffect, useMemo, useState } from \"react\";\n\nexport default function HRLeads() {\n  const [rows, setRows] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [filters, setFilters] = useState({ search: \"\", status: \"\" });\n\n  const query = useMemo(() => {\n    const p = new URLSearchParams();\n    if (filters.search) p.set(\"search\", filters.search);\n    if (filters.status) p.set(\"status\", filters.status);\n    p.set(\"sort\", \"created_at.desc\");\n    return p.toString();\n  }, [filters]);\n\n  useEffect(() => {\n    setLoading(true);\n    fetch(`/api/hr-leads?${query}`)\n      .then((r) => r.json())\n      .then((j) => setRows(j?.data || []))\n      .finally(() => setLoading(false));\n  }, [query]);\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-end justify-between gap-3 flex-wrap\">\n        <h1 className=\"text-2xl font-semibold\">HR Leads</h1>\n        <div className=\"flex gap-2 flex-wrap\">\n          <input\n            placeholder=\"Search name/company/email…\"\n            className=\"border rounded-lg px-3 py-2\"\n            value={filters.search}\n            onChange={(e) => setFilters((f) => ({ ...f, search: e.target.value }))}\n          />\n          <select\n            className=\"border rounded-lg px-3 py-2\"\n            value={filters.status}\n            onChange={(e) => setFilters((f) => ({ ...f, status: e.target.value }))}\n          >",
      "tail": "                      )}\n                    </div>\n                  </td>\n                  <td className=\"px-4 py-2\">{r.company_name || r.company?.name || \"-\"}</td>\n                  <td className=\"px-4 py-2\">{r.designation || \"-\"}</td>\n                  <td className=\"px-4 py-2\">\n                    {r.email ? <a className=\"underline\" href={`mailto:${r.email}`}>{r.email}</a> : \"—\"}\n                  </td>\n                  <td className=\"px-4 py-2\">{r.lead_status || \"New\"}</td>\n                  <td className=\"px-4 py-2\">{r.created_at ? new Date(r.created_at).toLocaleString() : \"-\"}</td>\n                </tr>\n              ))\n            )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nfunction ensureHttp(u) {\n  if (!u) return null;\n  return u.startsWith(\"http\") ? u : `https://${u}`;\n}\n"
    },
    {
      "path": "dashboard/src/pages/Leads.jsx",
      "size": 4709,
      "mtime": "2025-09-13T12:28:28.342Z",
      "sha256": "9bb248d60305ad8cbfd1542ebe0aafe96cacaed661f6f3931b97db27f9ab29f9",
      "imports": [
        "import { useEffect, useMemo, useState } from \"react\";"
      ],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "// dashboard/src/pages/Leads.jsx\nimport { useEffect, useMemo, useState } from \"react\";\n\nexport default function TargetedCompanies() {\n  const [rows, setRows] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [filters, setFilters] = useState({ search: \"\", type: \"\", status: \"\", location: \"\" });\n\n  const query = useMemo(() => {\n    const p = new URLSearchParams();\n    if (filters.search) p.set(\"search\", filters.search);\n    if (filters.type) p.set(\"type\", filters.type);\n    if (filters.status) p.set(\"status\", filters.status);\n    if (filters.location) p.set(\"location\", filters.location);\n    p.set(\"sort\", \"created_at.desc\");\n    return p.toString();\n  }, [filters]);\n\n  useEffect(() => {\n    setLoading(true);\n    fetch(`/api/companies?${query}`)\n      .then(r => r.json())\n      .then(j => setRows(j?.data || []))\n      .finally(() => setLoading(false));\n  }, [query]);\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-end justify-between gap-3 flex-wrap\">\n        <div>\n          <h1 className=\"text-2xl font-semibold\">Targeted Companies</h1>\n          <p className=\"text-sm text-gray-600\">Company, locations, type, status, QScore, created</p>\n        </div>\n        <div className=\"flex gap-2 flex-wrap\">\n          <input\n            placeholder=\"Search company…\"\n            className=\"border rounded-lg px-3 py-2\"\n            value={filters.search}\n            onChange={(e) => setFilters(f => ({ ...f, search: e.target.value }))}\n          />",
      "tail": "            ) : rows.length === 0 ? (\n              <tr><td className=\"px-4 py-4 text-gray-500\" colSpan={6}>No companies yet.</td></tr>\n            ) : rows.map((r) => (\n              <tr key={r.id} className=\"border-t\">\n                <td className=\"px-4 py-2\">\n                  <div className=\"font-medium\">{r.name}</div>\n                  <div className=\"text-xs text-gray-500 flex gap-2\">\n                    {r.website_url && <a href={r.website_url} target=\"_blank\" rel=\"noreferrer\" className=\"underline\">website</a>}\n                    {r.linkedin_url && <a href={r.linkedin_url} target=\"_blank\" rel=\"noreferrer\" className=\"underline\">linkedin</a>}\n                  </div>\n                </td>\n                <td className=\"px-4 py-2\">{Array.isArray(r.locations) ? r.locations.join(\", \") : \"\"}</td>\n                <td className=\"px-4 py-2\">{r.type || \"-\"}</td>\n                <td className=\"px-4 py-2\">{r.status}</td>\n                <td className=\"px-4 py-2\">{r.qscore ?? 0}</td>\n                <td className=\"px-4 py-2\">{new Date(r.created_at).toLocaleString()}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "path": "dashboard/src/pages/LeadsPage.jsx",
      "size": 4507,
      "mtime": "2025-09-13T06:18:46.713Z",
      "sha256": "440c00f80642379c41337aee3fc300bbbe3d285abd991e4af566140d6b9bf7cb",
      "imports": [
        "import { useEffect, useState } from \"react\";",
        "import { authFetch, getAuthHeader } from \"../utils/auth\";"
      ],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "// dashboard/src/pages/LeadsPage.jsx\nimport { useEffect, useState } from \"react\";\nimport { authFetch, getAuthHeader } from \"../utils/auth\";\n\nexport default function LeadsPage() {\n  const [leads, setLeads] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [err, setErr] = useState(null);\n\n  const [company, setCompany] = useState(\"\");\n  const [role, setRole] = useState(\"\");\n  const [saving, setSaving] = useState(false);\n\n  async function fetchLeads() {\n    setLoading(true);\n    setErr(null);\n    try {\n      const res = await authFetch(\"/api/leads\", {\n        headers: getAuthHeader(),\n      });\n      if (!res.ok) {\n        const data = await safeJson(res);\n        throw new Error(data?.error || \"Failed to fetch leads\");\n      }\n      const data = await res.json();\n      setLeads(data.data || []);\n    } catch (e) {\n      setErr(e?.message || \"Error fetching leads\");\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    fetchLeads();\n  }, []);\n\n  async function addLead(e) {\n    e.preventDefault();\n    if (!company.trim() || !role.trim()) {",
      "tail": "                  <td className=\"px-4 py-2\">{lead.company}</td>\n                  <td className=\"px-4 py-2\">{lead.role}</td>\n                  <td className=\"px-4 py-2\">{lead.salary_band}</td>\n                  <td className=\"px-4 py-2\">{lead.status}</td>\n                  <td className=\"px-4 py-2\">\n                    {new Date(lead.created_at).toLocaleString()}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n}\n\nasync function safeJson(resp) {\n  try {\n    return await resp.json();\n  } catch {\n    return null;\n  }\n}\n"
    },
    {
      "path": "dashboard/src/pages/Login.jsx",
      "size": 3989,
      "mtime": "2025-09-19T18:49:04.587Z",
      "sha256": "970f016bec38b90458f12fc001caff6e626f861cd481bfb65bd7dcfd80ad8e8a",
      "imports": [
        "import React, { useEffect, useState } from \"react\";",
        "import { useNavigate } from \"react-router-dom\";"
      ],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "import React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport default function Login() {\n  const navigate = useNavigate();\n\n  // UI state\n  const [checking, setChecking] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  // If you ever host the API elsewhere, set VITE_API_BASE; otherwise '' keeps same-origin.\n  const API_BASE = (import.meta?.env?.VITE_API_BASE || \"\").replace(/\\/+$/, \"\");\n\n  // 1) Probe existing session; DO NOT hang the UI on network errors.\n  useEffect(() => {\n    let cancelled = false;\n    (async () => {\n      try {\n        const res = await fetch(`${API_BASE}/api/auth/verify`, {\n          credentials: \"include\",\n          headers: { Accept: \"application/json\" },\n        });\n        if (res.ok) {\n          const j = await res.json().catch(() => ({}));\n          if (!cancelled && j?.ok) {\n            navigate(\"/\", { replace: true });\n            return;\n          }\n        }\n        // Non-OK falls through to show the form\n      } catch (e) {\n        // Network error (what you’re seeing) — just show the form\n        console.warn(\"verify failed:\", e);\n        window.__UPR_LAST_UI_ERROR__ = e;\n      } finally {\n        if (!cancelled) setChecking(false);\n      }\n    })();",
      "tail": "        <label className=\"block text-sm mb-1\" htmlFor=\"password\">\n          Password\n        </label>\n        <input\n          id=\"password\"\n          type=\"password\"\n          className=\"w-full mb-4 border rounded px-3 py-2\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          autoComplete=\"current-password\"\n          required\n        />\n\n        <button className=\"w-full rounded bg-gray-900 text-white py-2\">\n          Sign in\n        </button>\n\n        <p className=\"text-xs text-gray-500 mt-3\">\n          If session check fails due to network, the form appears so you can sign in manually.\n        </p>\n      </form>\n    </div>\n  );\n}\n"
    },
    {
      "path": "dashboard/src/pages/MessagesPage.jsx",
      "size": 456,
      "mtime": "2025-09-13T12:56:14.140Z",
      "sha256": "01288e8205b1dd6c82b87f4399e49af66a475a5799a42fcd0c1455dec6cab3f0",
      "imports": [],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "// dashboard/src/pages/MessagesPage.jsx\nexport default function MessagesPage() {\n  return (\n    <div className=\"space-y-3\">\n      <h1 className=\"text-2xl font-semibold\">Messages</h1>\n      <p className=\"text-sm text-gray-600\">\n        Outreach queue & templates will appear here (email / LinkedIn). Coming soon.\n      </p>\n      <div className=\"rounded-xl border bg-white p-4 text-sm text-gray-500\">\n        No messages yet.\n      </div>\n    </div>\n  );\n}\n",
      "tail": "// dashboard/src/pages/MessagesPage.jsx\nexport default function MessagesPage() {\n  return (\n    <div className=\"space-y-3\">\n      <h1 className=\"text-2xl font-semibold\">Messages</h1>\n      <p className=\"text-sm text-gray-600\">\n        Outreach queue & templates will appear here (email / LinkedIn). Coming soon.\n      </p>\n      <div className=\"rounded-xl border bg-white p-4 text-sm text-gray-500\">\n        No messages yet.\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "path": "dashboard/src/pages/index.js",
      "size": 535,
      "mtime": "2025-09-19T18:05:51.290Z",
      "sha256": "88410b76a091309c99dcbd1eac357cfe616a2f20735885931e504d113ebba37e",
      "imports": [],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "// Barrel exports for pages (keeps imports case-correct & tidy)\nexport { default as DashboardHome }  from \"./DashboardHome.jsx\";\nexport { default as EnrichmentPage } from \"./EnrichmentPage.jsx\";\nexport { default as CompaniesPage }  from \"./CompaniesPage.jsx\";\nexport { default as HRLeads }        from \"./HRLeads.jsx\";\nexport { default as MessagesPage }   from \"./MessagesPage.jsx\";\n\n// Add more when needed, e.g.:\n// export { default as Admin } from \"./Admin.jsx\";\n// export { default as AdminDashboard } from \"./AdminDashboard.jsx\";\n",
      "tail": "// Barrel exports for pages (keeps imports case-correct & tidy)\nexport { default as DashboardHome }  from \"./DashboardHome.jsx\";\nexport { default as EnrichmentPage } from \"./EnrichmentPage.jsx\";\nexport { default as CompaniesPage }  from \"./CompaniesPage.jsx\";\nexport { default as HRLeads }        from \"./HRLeads.jsx\";\nexport { default as MessagesPage }   from \"./MessagesPage.jsx\";\n\n// Add more when needed, e.g.:\n// export { default as Admin } from \"./Admin.jsx\";\n// export { default as AdminDashboard } from \"./AdminDashboard.jsx\";\n"
    },
    {
      "path": "routes/companies.js",
      "size": 7419,
      "mtime": "2025-09-13T14:37:11.353Z",
      "sha256": "a180350cbffd18f86e600c6210b87b18f42d4707cbdbdf363f9e9f079319e837",
      "imports": [
        "import express from \"express\";",
        "import { pool } from \"../utils/db.js\";",
        "import { ok, bad } from \"../utils/respond.js\";",
        "import { computeQScore } from \"../utils/qscore.js\";",
        "import { isValidCompanyType, isValidCompanyStatus } from \"../utils/validators.js\";"
      ],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "// routes/companies.js\nimport express from \"express\";\nimport { pool } from \"../utils/db.js\";\nimport { ok, bad } from \"../utils/respond.js\";\nimport { computeQScore } from \"../utils/qscore.js\";\nimport { isValidCompanyType, isValidCompanyStatus } from \"../utils/validators.js\";\n\nconst router = express.Router();\n\nconst ALLOWED_LOCATIONS = new Set([\"Abu Dhabi\", \"Dubai\", \"Sharjah\"]);\nfunction normalizeLocations(loc) {\n  if (!loc) return [];\n  const arr = Array.isArray(loc) ? loc : String(loc).split(\",\"); // allow comma-separated\n  return Array.from(\n    new Set(\n      arr\n        .map((s) => String(s).trim())\n        .filter(Boolean)\n        .filter((s) => ALLOWED_LOCATIONS.has(s))\n    )\n  );\n}\n\nfunction coalesceBodyAliases(body = {}) {\n  // Accept both old and new keys\n  return {\n    name: body.name,\n    type: body.type ?? body.company_type, // \"ALE\" | \"NON ALE\" | \"Good Coded\"\n    locations: normalizeLocations(body.locations),\n    website_url: body.website_url ?? body.website,\n    linkedin_url: body.linkedin_url ?? body.linkedin,\n    status: body.status,\n    status_remarks: body.status_remarks,\n    about_blurb: body.about_blurb,\n  };\n}\n\n/**\n * POST /api/companies\n * Body: { name, type|company_type, locations[], website_url|website, linkedin_url|linkedin }",
      "tail": "    const { id } = req.params;\n    const c = await pool.query(\"SELECT * FROM targeted_companies WHERE id=$1\", [id]);\n    if (!c.rowCount) return bad(res, \"not found\", 404);\n\n    const n = await pool.query(\"SELECT tags FROM news_items WHERE company_id=$1\", [id]);\n    const qscore = computeQScore(c.rows[0], n.rows);\n\n    const u = await pool.query(\n      `UPDATE targeted_companies\n         SET qscore=$1, updated_at=now()\n       WHERE id=$2\n       RETURNING id, name, type, locations, website_url, linkedin_url,\n                 status, status_remarks, about_blurb, qscore,\n                 created_at AS created, updated_at`,\n      [qscore, id]\n    );\n    return ok(res, u.rows[0]);\n  } catch (e) {\n    console.error(e);\n    return bad(res, \"server error\", 500);\n  }\n});\n\nexport default router;\n"
    },
    {
      "path": "routes/diag.js",
      "size": 1603,
      "mtime": "2025-09-19T16:05:10.752Z",
      "sha256": "3f9c2995d73215852eb97ff798454c79ac3ab8a86f54efa6652a7716de90c3ac",
      "imports": [
        "import express from \"express\";",
        "import os from \"os\";",
        "import { pool } from \"../utils/db.js\";"
      ],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "import express from \"express\";\nimport os from \"os\";\nimport { pool } from \"../utils/db.js\";\n\nconst router = express.Router();\n\nfunction listRoutes(app) {\n  try {\n    const out = [];\n    for (const layer of (app?._router?.stack || [])) {\n      if (layer?.route) {\n        const methods = Object.keys(layer.route.methods || {})\n          .filter(Boolean).map(m => m.toUpperCase()).join(\",\");\n        out.push(`${methods} ${layer.route.path}`);\n      } else if (layer?.name === \"router\" && layer?.handle?.stack) {\n        for (const r of layer.handle.stack) {\n          if (r?.route) {\n            const methods = Object.keys(r.route.methods || {})\n              .filter(Boolean).map(m => m.toUpperCase()).join(\",\");\n            out.push(`${methods} ${r.route.path}`);\n          }\n        }\n      }\n    }\n    return out;\n  } catch {\n    return [];\n  }\n}\n\nrouter.get(\"/\", async (req, res) => {\n  // DB health\n  let db_ok = false;\n  let db_error = null;\n  try {\n    await pool.query(\"SELECT 1\");\n    db_ok = true;\n  } catch (e) {\n    db_error = String(e?.message || e);\n  }",
      "tail": "    \"DATABASE_URL\",\n    \"UPR_ADMIN_USER\",\n    \"UPR_ADMIN_PASS\",\n    \"JWT_SECRET\",\n    \"APOLLO_API_KEY\",\n    \"OPENAI_API_KEY\",\n    \"NEVERBOUNCE_API_KEY\",\n    \"ZEROBOUNCE_API_KEY\",\n  ];\n  const env = {};\n  for (const k of envKeys) env[k] = !!process.env[k];\n\n  res.json({\n    ok: true,\n    db_ok,\n    db_error,\n    node: process.version,\n    platform: `${os.platform()} ${os.release()}`,\n    routesMounted: listRoutes(req.app),\n    env,\n  });\n});\n\nexport default router;\n"
    },
    {
      "path": "routes/email.js",
      "size": 5237,
      "mtime": "2025-09-14T03:28:29.613Z",
      "sha256": "6bf67e72fb329b09105d19e712612498829a69c1575526202f033f5ad7174809",
      "imports": [
        "import express from \"express\";",
        "import { ok, bad } from \"../utils/respond.js\";",
        "import { adminOnly } from \"../utils/adminOnly.js\";",
        "import { detectPattern, generateEmail, generateCandidates } from \"../utils/emailPatterns.js\";",
        "import { verifyEmail } from \"../utils/emailVerify.js\";",
        "import { getDomainPattern, setDomainPattern } from \"../utils/patternCache.js\";"
      ],
      "envs": [
        "SMTP_VERIFY_MAX"
      ],
      "appUses": [],
      "endpoints": [],
      "head": "// routes/email.js\nimport express from \"express\";\nimport { ok, bad } from \"../utils/respond.js\";\nimport { adminOnly } from \"../utils/adminOnly.js\";\nimport { detectPattern, generateEmail, generateCandidates } from \"../utils/emailPatterns.js\";\nimport { verifyEmail } from \"../utils/emailVerify.js\";\nimport { getDomainPattern, setDomainPattern } from \"../utils/patternCache.js\";\n\nconst router = express.Router();\n\nconst MAX_VERIFY = Number(process.env.SMTP_VERIFY_MAX || 8);\n\n/**\n * POST /api/email/verify  (admin-gated)\n * Body:\n * {\n *   emails?: string[],                   // emails to verify (optional)\n *   domain?: string,                     // domain to infer/generate against\n *   names?: string[],                    // names to generate candidates (when pattern known/guessed)\n *   known?: [{ name, email }],           // pairs for discovery\n *   savePattern?: boolean                // persist discovered pattern to cache (default true)\n * }\n */\nrouter.post(\"/verify\", adminOnly, async (req, res) => {\n  try {\n    const {\n      emails = [],\n      domain,\n      names = [],\n      known = [],\n      savePattern = true,\n    } = req.body || {};\n\n    if (!emails.length && !domain) {\n      return bad(res, \"Provide emails or a domain\");\n    }\n\n    // 1) Try cache for domain\n    let cached = domain ? await getDomainPattern(domain) : null;\n",
      "tail": "    const { domain } = req.query;\n    if (!domain) return bad(res, \"domain required\");\n    const row = await getDomainPattern(domain);\n    return ok(res, row || null);\n  } catch (e) {\n    console.error(\"email/pattern get error:\", e);\n    return bad(res, \"server error\", 500);\n  }\n});\n\n/** POST /api/email/pattern  (admin-gated, manual set) */\nrouter.post(\"/pattern\", adminOnly, async (req, res) => {\n  try {\n    const { domain, pattern_id, example } = req.body || {};\n    if (!domain || !pattern_id) return bad(res, \"domain and pattern_id required\");\n    const r = await setDomainPattern({ domain, pattern_id, source: \"manual\", example });\n    return ok(res, r);\n  } catch (e) {\n    console.error(\"email/pattern post error:\", e);\n    return bad(res, \"server error\", 500);\n  }\n});\n\nexport default router;\n"
    },
    {
      "path": "routes/enrich.js",
      "size": 782,
      "mtime": "2025-09-19T15:11:20.093Z",
      "sha256": "d51d6214c654cc5ba3317c789b27feef4ec22d5c67daa485f96d4ca09eed3119",
      "imports": [
        "import express from \"express\";",
        "import { pool } from \"../utils/db.js\";",
        "import buildSearchRouter from \"./enrich/search.js\";",
        "import buildEnrichCompanyRouter from \"./enrich/enrichCompany.js\";"
      ],
      "envs": [
        "APOLLOIO_API_KEY",
        "APOLLO_API_KEY",
        "APOLLO_TOKEN",
        "OPENAI_API_KEY"
      ],
      "appUses": [],
      "endpoints": [],
      "head": "import express from \"express\";\nimport { pool } from \"../utils/db.js\";\nimport buildSearchRouter from \"./enrich/search.js\";\nimport buildEnrichCompanyRouter from \"./enrich/enrichCompany.js\";\n\nconst router = express.Router();\n\n// Status ping (LLM/DB/Data source)\nrouter.get(\"/status\", async (_req, res) => {\n  const llm_ok = !!process.env.OPENAI_API_KEY;\n  const data_source = process.env.APOLLO_API_KEY || process.env.APOLLOIO_API_KEY || process.env.APOLLO_TOKEN ? \"live\" : \"mock\";\n  let db_ok = false;\n  try { await pool.query(\"SELECT 1\"); db_ok = true; } catch { db_ok = false; }\n  res.json({ ok: true, data: { db_ok, llm_ok, data_source } });\n});\n\n// Mount sub-routers\nrouter.use(buildSearchRouter({ pool }));\nrouter.use(buildEnrichCompanyRouter({ pool }));\n\nexport default router;\n",
      "tail": "import express from \"express\";\nimport { pool } from \"../utils/db.js\";\nimport buildSearchRouter from \"./enrich/search.js\";\nimport buildEnrichCompanyRouter from \"./enrich/enrichCompany.js\";\n\nconst router = express.Router();\n\n// Status ping (LLM/DB/Data source)\nrouter.get(\"/status\", async (_req, res) => {\n  const llm_ok = !!process.env.OPENAI_API_KEY;\n  const data_source = process.env.APOLLO_API_KEY || process.env.APOLLOIO_API_KEY || process.env.APOLLO_TOKEN ? \"live\" : \"mock\";\n  let db_ok = false;\n  try { await pool.query(\"SELECT 1\"); db_ok = true; } catch { db_ok = false; }\n  res.json({ ok: true, data: { db_ok, llm_ok, data_source } });\n});\n\n// Mount sub-routers\nrouter.use(buildSearchRouter({ pool }));\nrouter.use(buildEnrichCompanyRouter({ pool }));\n\nexport default router;\n"
    },
    {
      "path": "routes/enrich/enrichCompany.js",
      "size": 8900,
      "mtime": "2025-09-19T15:11:20.099Z",
      "sha256": "60d0c620161eede48731b18d54c5bae5eca399d186c6032f8dcf2d511122159e",
      "imports": [
        "import express from \"express\";",
        "import { nanoid } from \"nanoid\";",
        "import { qualityScore, scoreCandidate, roleBucket, bucketSeniority } from \"./lib/quality.js\";",
        "import { emirateFromLocation, isUAE } from \"./lib/geo.js\";"
      ],
      "envs": [
        "APOLLOIO_API_KEY",
        "APOLLO_API_KEY",
        "APOLLO_TOKEN"
      ],
      "appUses": [],
      "endpoints": [],
      "head": "import express from \"express\";\nimport { nanoid } from \"nanoid\";\nimport {\n  compactApolloKeywords, apolloPeopleByDomain,\n  deriveLocation\n} from \"./lib/apollo.js\";\nimport { qualityScore, scoreCandidate, roleBucket, bucketSeniority } from \"./lib/quality.js\";\nimport { emirateFromLocation, isUAE } from \"./lib/geo.js\";\nimport {\n  inferPatternFromSamples, applyPattern, isProviderPlaceholderEmail,\n  loadPatternFromCache, savePatternToCache, verifyEmail\n} from \"./lib/email.js\";\n\nexport default function buildEnrichCompanyRouter({ pool }) {\n  const router = express.Router();\n  const jobs = new Map();\n\n  // POST /api/enrich  { company_id, max_contacts? }\n  router.post(\"/\", async (req, res) => {\n    const { company_id, max_contacts = 3 } = req.body || {};\n    if (!company_id) return res.status(400).json({ status: \"error\", error: \"company_id_required\" });\n\n    const job_id = `enrich_${Date.now()}_${nanoid(6)}`;\n    jobs.set(job_id, { status: \"queued\", company_id, results: [], summary: {} });\n\n    try {\n      const company = await getCompany(pool, company_id);\n      if (!company) {\n        const payload = { job_id, status: \"error\", error: \"company_not_found\" };\n        jobs.set(job_id, payload);\n        return res.status(404).json(payload);\n      }\n\n      if (!company.domain && company.website_url) {\n        try {\n          const u = new URL(company.website_url.startsWith(\"http\") ? company.website_url : `https://${company.website_url}`);\n          company.domain = u.hostname.replace(/^www\\./, \"\");\n        } catch {}\n      }\n",
      "tail": "      email_status=EXCLUDED.email_status,\n      source=EXCLUDED.source,\n      confidence=EXCLUDED.confidence,\n      role_bucket=EXCLUDED.role_bucket,\n      seniority=EXCLUDED.seniority,\n      email_reason=EXCLUDED.email_reason\n    RETURNING id, company_id, email, confidence\n  `;\n  const vals = [\n    company_id,\n    c.name || \"\",\n    c.designation || \"\",\n    c.linkedin_url || \"\",\n    c.email || null,\n    c.email_status || \"unknown\",\n    c.source || \"live\",\n    c.confidence ?? null,\n    c.role_bucket || null,\n    c.seniority || null,\n    c.email_reason || null,\n  ];\n  const { rows } = await pool.query(q, vals);\n  return rows[0];\n}\n"
    },
    {
      "path": "routes/enrich/index.js",
      "size": 3755,
      "mtime": "2025-09-20T11:21:07.571Z",
      "sha256": "d80951bbe8ac4f0aa5b071e8000001195db9a7a2fa74c6b2c456bb38bb09add2",
      "imports": [
        "import { Router } from \"express\";",
        "import searchHandler from \"./search.js\";",
        "import { pool } from \"../../utils/db.js\";"
      ],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "// routes/enrich/index.js\nimport { Router } from \"express\";\nimport searchHandler from \"./search.js\";\nimport { pool } from \"../../utils/db.js\";\n\nconst router = Router();\n\nfunction noStore(res) {\n  res.setHeader(\"Cache-Control\", \"no-store, must-revalidate\");\n}\n\n/** Chips status */\nrouter.get(\"/status\", (_req, res) => {\n  noStore(res);\n  res.json({ ok: true, data: { db_ok: true, llm_ok: true, data_source: \"live\" } });\n});\n\n/** GET /api/enrich/search */\nrouter.get(\"/search\", async (req, res, next) => {\n  try {\n    noStore(res);\n    const q = (req.query?.q || \"\").trim();\n    console.log(`[${req._reqid}] enrich/search GET q=\"${q}\"`);\n    await searchHandler(req, res, next);\n  } catch (e) {\n    console.error(`[${req._reqid}] enrich/search GET error`, e?.stack || e);\n    if (!res.headersSent) {\n      res.status(200).json({\n        ok: true,\n        data: { results: [], summary: { provider: \"live\", quality: { score: 0.5, explanation: \"No matches found.\" } } },\n      });\n    }\n  }\n});\n\n/** POST /api/enrich/search  (same behavior as GET; UI may call this as fallback) */\nrouter.post(\"/search\", async (req, res, next) => {\n  try {\n    noStore(res);\n    // Allow the same handler by mapping body into query-like fields it expects",
      "tail": "        const emirate = c.emirate ?? null;\n        const source = c.source ?? \"enrich\";\n        const sql = `\n          INSERT INTO hr_leads (company_id, name, role, email, linkedin_url, emirate, status, source)\n          VALUES ($1, $2, $3, $4, $5, $6, 'new', $7)\n          ON CONFLICT DO NOTHING\n        `;\n        await pool.query(sql, [companyId, name, designation, email, linkedin, emirate, source]);\n        saved++;\n      } catch {\n        /* ignore per-row errors */\n      }\n    }\n    await pool.query(\"COMMIT\");\n  } catch (e) {\n    try { await pool.query(\"ROLLBACK\"); } catch {}\n    console.error(`[${req._reqid}] enrich/save error`, e?.stack || e);\n    return res.status(200).json({ ok: false, error: \"bulk-insert-failed\", saved });\n  }\n\n  return res.json({ ok: true, saved });\n});\n\nexport default router;\n"
    },
    {
      "path": "routes/enrich/lib/apollo.js",
      "size": 2858,
      "mtime": "2025-09-19T17:42:26.097Z",
      "sha256": "34b1a905fa57cb4f778e2c82a1befcd3ca7f995293c56b591bbedca96dd33dd4",
      "imports": [],
      "envs": [
        "APOLLO_API_KEY"
      ],
      "appUses": [],
      "endpoints": [],
      "head": "/**\n * Apollo provider wrapper (uses X-Api-Key header).\n * Exports:\n *  - searchPeopleByCompany({ name?, domain?, limit?, roleFilters? })\n *  - apolloPeopleByDomain(domain, { limit?, roleFilters? })\n *  - compactApolloKeywords(q)\n *  - deriveLocation(person)\n */\n\nconst APOLLO_BASE = \"https://api.apollo.io/v1\";\n\nfunction apolloHeaders() {\n  const key = process.env.APOLLO_API_KEY || \"\";\n  return {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"X-Api-Key\": key, // IMPORTANT: header (not query string)\n  };\n}\n\nfunction roleFiltersToQuery(roleFilters = [\"hr\",\"admin\",\"finance\"]) {\n  // Titles we care about (high recall but focused)\n  const titles = [\n    \"hr\", \"human resources\", \"talent\", \"recruit\", \"people\", \"people operations\", \"people & culture\",\n    \"admin\", \"office manager\", \"operations\",\n    \"finance\", \"account\", \"payroll\"\n  ];\n  // Apollo uses 'person_titles' OR 'q_keywords' depending on endpoint; we’ll use q_keywords to be flexible\n  return titles.join(\" OR \");\n}\n\nasync function apolloPOST(path, body) {\n  if (!process.env.APOLLO_API_KEY) {\n    return { ok: true, people: [], provider: \"mock\", reason: \"no_api_key\" };\n  }\n  const resp = await fetch(`${APOLLO_BASE}${path}`, {\n    method: \"POST\",\n    headers: apolloHeaders(),\n    body: JSON.stringify(body || {}),\n  });",
      "tail": "export async function apolloPeopleByDomain(domain, { limit = 10, roleFilters } = {}) {\n  if (!domain) return [];\n  const people = await searchPeopleByCompany({ domain, limit, roleFilters });\n  return people;\n}\n\nexport function compactApolloKeywords(q = \"\") {\n  return String(q).replace(/[^a-z0-9 ]/gi, \" \").replace(/\\s+/g, \" \").trim();\n}\n\nexport function deriveLocation(p = {}) {\n  return (\n    p?.location ||\n    [p?.city, p?.state, p?.country].filter(Boolean).join(\", \") ||\n    \"\"\n  );\n}\n\nexport default {\n  searchPeopleByCompany,\n  apolloPeopleByDomain,\n  compactApolloKeywords,\n  deriveLocation,\n};\n"
    },
    {
      "path": "routes/enrich/lib/email.js",
      "size": 5228,
      "mtime": "2025-09-19T17:42:26.091Z",
      "sha256": "0b8e9a517b56014cb1ae8ed7cb6cee9ffc70f7be765f894db8a7b4abc9f227a6",
      "imports": [],
      "envs": [
        "NEVERBOUNCE_API_KEY",
        "ZEROBOUNCE_API_KEY"
      ],
      "appUses": [],
      "endpoints": [],
      "head": "/**\n * Email utilities:\n *  - inferPatternFromSamples(emails[], domain?)\n *  - applyPattern(person, domain, pattern)\n *  - applyEmailPattern(person, domain, pattern)  // alias of applyPattern\n *  - isProviderPlaceholderEmail(email)\n *  - loadPatternFromCache(domain)\n *  - savePatternToCache(domain, pattern)\n *  - verifyEmail(email)  // NeverBounce/ZeroBounce if configured, else \"unknown\"\n */\n\nconst PATTERN_CACHE = new Map();\n\n/** very small name tokenizer */\nfunction splitName(obj) {\n  const raw =\n    obj?.name ||\n    [obj?.first_name, obj?.last_name].filter(Boolean).join(\" \") ||\n    \"\";\n  const s = String(raw).trim().replace(/\\s+/g, \" \");\n  if (!s) return { first: \"\", last: \"\" };\n  const parts = s.split(\" \");\n  const first = (obj?.first_name || parts[0] || \"\").toLowerCase();\n  const last = (obj?.last_name || parts.slice(-1)[0] || \"\").toLowerCase();\n  return { first, last };\n}\n\n/** apply a guessed pattern to produce an email string */\nexport function applyPattern(person, domain, pattern) {\n  const { first, last } = splitName(person);\n  const f = first.replace(/[^a-z]/g, \"\");\n  const l = last.replace(/[^a-z]/g, \"\");\n  const fl = f?.[0] || \"\";\n  const ll = l?.[0] || \"\";\n  const d = String(domain || \"\").toLowerCase().replace(/^https?:\\/\\//, \"\").replace(/\\/.*/, \"\");\n\n  if (!d || (!f && !l)) return \"\";\n\n  const local = (() => {\n    switch (String(pattern || \"\").toLowerCase()) {",
      "tail": "      url.searchParams.set(\"api_key\", zb);\n      url.searchParams.set(\"email\", email);\n      const resp = await fetch(url.toString());\n      const json = await resp.json();\n      if (json && json.status) {\n        const map = { valid: \"valid\", invalid: \"invalid\", catch_all: \"accept_all\", unknown: \"unknown\" };\n        return { status: map[json.status] || \"unknown\", reason: \"zerobounce\" };\n      }\n    }\n  } catch (e) {\n    return { status: \"unknown\", reason: \"verifier_error\" };\n  }\n  return { status: \"unknown\", reason: \"no_verifier\" };\n}\n\nexport default {\n  inferPatternFromSamples,\n  applyPattern,\n  applyEmailPattern,\n  isProviderPlaceholderEmail,\n  loadPatternFromCache,\n  savePatternToCache,\n  verifyEmail,\n};\n"
    },
    {
      "path": "routes/enrich/lib/geo.js",
      "size": 2101,
      "mtime": "2025-09-19T17:42:26.100Z",
      "sha256": "23d1ae1fd07d06d485a48f53a1606816dd10d8cb8f96a66438fb26ff8632f129",
      "imports": [],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "/**\n * GEO helpers for UAE:\n *  - isUAE(locationLike)\n *  - emirateFromLocation(locationLike)\n *  - tagEmirate(record)  // mutates and returns record\n */\n\nconst EMIRATES = [\n  \"Abu Dhabi\",\n  \"Dubai\",\n  \"Sharjah\",\n  \"Ajman\",\n  \"Fujairah\",\n  \"Ras Al Khaimah\",\n  \"Umm Al Quwain\",\n];\n\nconst CITY_TO_EMIRATE = new Map([\n  [\"abu dhabi\",\"Abu Dhabi\"],\n  [\"al ain\",\"Abu Dhabi\"],\n  [\"mussafah\",\"Abu Dhabi\"],\n  [\"dubai\",\"Dubai\"],\n  [\"jlt\",\"Dubai\"],\n  [\"jumeirah\",\"Dubai\"],\n  [\"business bay\",\"Dubai\"],\n  [\"internet city\",\"Dubai\"],\n  [\"sharjah\",\"Sharjah\"],\n  [\"ajman\",\"Ajman\"],\n  [\"fujairah\",\"Fujairah\"],\n  [\"rak\",\"Ras Al Khaimah\"],\n  [\"ras al khaimah\",\"Ras Al Khaimah\"],\n  [\"umm al quwain\",\"Umm Al Quwain\"],\n  [\"uaq\",\"Umm Al Quwain\"],\n]);\n\nfunction norm(s) {\n  return String(s || \"\").toLowerCase().replace(/\\s+/g, \" \").trim();\n}\n\nexport function isUAE(loc) {",
      "tail": "}\n\nexport function emirateFromLocation(loc) {\n  const s = norm(\n    typeof loc === \"string\"\n      ? loc\n      : [loc?.city, loc?.state, loc?.country, loc?.location].filter(Boolean).join(\", \")\n  );\n  if (!s) return \"\";\n  for (const e of EMIRATES) if (s.includes(e.toLowerCase())) return e;\n  for (const [k, v] of CITY_TO_EMIRATE.entries()) if (s.includes(k)) return v;\n  if (/(united arab emirates|u\\.?a\\.?e\\.?|\\buae\\b)/i.test(s)) return \"United Arab Emirates\";\n  return \"\";\n}\n\nexport function tagEmirate(record) {\n  if (!record || typeof record !== \"object\") return record;\n  const loc = record.location || [record.city, record.region, record.state, record.country].filter(Boolean).join(\", \");\n  const e = emirateFromLocation(loc);\n  if (e) record.emirate = e;\n  return record;\n}\n\nexport default { isUAE, emirateFromLocation, tagEmirate };\n"
    },
    {
      "path": "routes/enrich/lib/llm.js",
      "size": 1784,
      "mtime": "2025-09-19T16:33:09.131Z",
      "sha256": "b7a270af2572825ec4715c38f0383dd460711f3a0e48ada50f660cc7545cbe46",
      "imports": [],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "/**\n * Very lightweight heuristics-based guesser with override support.\n * If overrides are passed (name/domain/linkedin_url), they win.\n * Otherwise we infer from the text, preferring .ae domains for UAE context\n * and recognizing simple \"X from Y\" subsidiary language.\n */\nexport async function guessCompany(q, overrides = {}) {\n  const out = {\n    name: null,\n    domain: null,\n    website_url: null,\n    linkedin_url: null,\n    hq: \"United Arab Emirates\",\n    industry: null,\n    size: null,\n    synonyms: [],\n    mode: \"LLM\",\n    confidence: 0.7,\n  };\n\n  // 1) Overrides first\n  if (overrides.name) out.name = overrides.name;\n  if (overrides.domain) {\n    const d = overrides.domain.toLowerCase().replace(/^https?:\\/\\//, \"\").replace(/\\/.*$/, \"\");\n    out.domain = d;\n    out.website_url = `https://${d}`;\n  }\n  if (overrides.linkedin_url) out.linkedin_url = overrides.linkedin_url;\n\n  // 2) If we still need, infer from q\n  const ql = q.toLowerCase();\n  const tokens = ql.split(/\\s+/).filter(Boolean);\n\n  // simple patterns for \"X from Y\" / \"X @ Y\"\n  const fromIdx = tokens.indexOf(\"from\");\n  if (!out.name && fromIdx > 0) {\n    out.name = tokens.slice(0, fromIdx).join(\" \");\n  }\n  if (!out.name) {\n    out.name = q.trim();",
      "tail": "  // simple patterns for \"X from Y\" / \"X @ Y\"\n  const fromIdx = tokens.indexOf(\"from\");\n  if (!out.name && fromIdx > 0) {\n    out.name = tokens.slice(0, fromIdx).join(\" \");\n  }\n  if (!out.name) {\n    out.name = q.trim();\n  }\n\n  // prefer .ae if likely UAE\n  if (!out.domain) {\n    // normalize brand → domain-ish\n    const brand = out.name.toLowerCase().replace(/[^a-z0-9]+/g, \"\");\n    // crude: if query mentions bank → try brand + .com; else prefer .ae\n    const ends = /bank|university|government|gulf|dubai|abu|sharjah/.test(ql) ? [\".com\", \".ae\"] : [\".ae\", \".com\"];\n    out.domain = `${brand}${ends[0]}`;\n    out.website_url = `https://${out.domain}`;\n  }\n\n  // record parent for reference\n  if (overrides.parent) out.synonyms.push(overrides.parent);\n\n  return out;\n}\n"
    },
    {
      "path": "routes/enrich/lib/quality.js",
      "size": 2518,
      "mtime": "2025-09-19T17:42:26.094Z",
      "sha256": "ab3dedb73b37514f0de370c15092022e288cafa1c7bbab7c2abc21dd41870e5a",
      "imports": [],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "/**\n * Quality scoring utilities\n *  - roleBucket(title)\n *  - bucketSeniority(title)\n *  - scoreCandidate(c)\n *  - qualityScore(companyGuess, candidates)\n *  - scoreQuality(...)  // alias kept for older imports\n */\n\nconst HR_RX = /(human\\s*resources|hr|talent|recruit(ing|er)?|people ops?|people\\s*(and)?\\s*culture)/i;\nconst ADMIN_RX = /\\b(admin(istration)?|office\\s*manager|operations?|ops)\\b/i;\nconst FIN_RX = /\\b(finance|account(s|ing)?|payroll|fp&a)\\b/i;\n\nexport function roleBucket(title = \"\") {\n  if (HR_RX.test(title)) return \"hr\";\n  if (ADMIN_RX.test(title)) return \"admin\";\n  if (FIN_RX.test(title)) return \"finance\";\n  return \"other\";\n}\n\nexport function bucketSeniority(title = \"\") {\n  const t = String(title).toLowerCase();\n  if (/chief|cxo|cfo|coo|chro|vp|vice president|director|head/.test(t)) return \"head\";\n  if (/lead|manager|supervisor/.test(t)) return \"manager\";\n  if (/sr\\.?|senior/.test(t)) return \"senior\";\n  if (/intern|junior|assistant/.test(t)) return \"junior\";\n  return \"staff\";\n}\n\nexport function scoreCandidate(c = {}) {\n  let s = 0.5;\n  const bucket = c.role_bucket || roleBucket(c.designation || c.title || \"\");\n  const senior = c.seniority || bucketSeniority(c.designation || c.title || \"\");\n\n  if (bucket === \"hr\") s += 0.2;\n  if (bucket === \"admin\" || bucket === \"finance\") s += 0.1;\n  if (c.emirate && c.emirate !== \"United Arab Emirates\") s += 0.1; // emirate-level match\n  if (senior === \"head\" || senior === \"manager\") s += 0.05;\n\n  if (c.email_status === \"valid\") s += 0.1;",
      "tail": "\n  const uaeCount = candidates.filter((c) => (c.emirate || \"\").length && (c.country || \"\").toLowerCase().includes(\"united arab emirates\")).length\n    || candidates.filter((c) => (c.location || \"\").toLowerCase().includes(\"united arab emirates\")).length;\n\n  if (uaeCount >= 5) s += 0.15;\n  else if (uaeCount >= 1) s += 0.05;\n\n  const patterned = candidates.filter((c) => c.email && !c.email.includes(\"@example.\")).length;\n  if (patterned >= 5) s += 0.15;\n  else if (patterned >= 1) s += 0.05;\n\n  return Number(Math.max(0, Math.min(0.98, s)).toFixed(2));\n}\n\n// legacy alias\nexport const scoreQuality = qualityScore;\n\nexport default {\n  roleBucket,\n  bucketSeniority,\n  scoreCandidate,\n  qualityScore,\n  scoreQuality,\n};\n"
    },
    {
      "path": "routes/enrich/search.js",
      "size": 10430,
      "mtime": "2025-09-20T11:47:41.723Z",
      "sha256": "97d6d74971fb4ecab189f832a013d914fb279431ba92c77bf0cb3fda78d9077f",
      "imports": [
        "import { performance } from \"node:perf_hooks\";"
      ],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "// routes/enrich/search.js\nimport { performance } from \"node:perf_hooks\";\n\n// ---------------------------- small utilities ----------------------------\nconst NOT_UNLOCKED_RE = /not[_-]?unlocked/i;\nconst EMAIL_RE = /^[^@\\s]+@([^\\s@]+\\.[^\\s@]+)$/i;\n\nfunction noStore(res) {\n  res.setHeader(\"Cache-Control\", \"no-store, must-revalidate\");\n}\n\nfunction stripProtoHost(s = \"\") {\n  return String(s)\n    .trim()\n    .replace(/^https?:\\/\\//i, \"\")\n    .replace(/^www\\./i, \"\")\n    .replace(/\\/.*$/, \"\")\n    .toLowerCase();\n}\n\nfunction extractDomainFromEmail(email) {\n  const m = EMAIL_RE.exec(email || \"\");\n  return m ? m[1].toLowerCase() : null;\n}\n\nfunction normalizeContacts(arr = []) {\n  if (!Array.isArray(arr)) return [];\n  return arr.map((c) => {\n    // normalize email + status; redact \"not unlocked\" placeholders\n    let email = c.email ?? c.work_email ?? c.contact_email ?? null;\n    let email_status = c.email_status ?? c.verification ?? undefined;\n    if (email && NOT_UNLOCKED_RE.test(email)) {\n      email = null;\n      email_status = \"locked\";\n    }\n\n    return {\n      name: c.name ?? c.full_name ?? c.person ?? \"—\",\n      designation: c.designation ?? c.title ?? c.role ?? undefined,\n      title: c.title ?? c.designation ?? c.role ?? undefined,",
      "tail": "  const qty = results.length;\n  summary.quality = {\n    score: Math.max(0.3, Math.min(0.95, qty >= 8 ? 0.9 : qty >= 3 ? 0.7 : 0.5)),\n    explanation: qty\n      ? `Found ${qty} candidates from ${summary.provider}.`\n      : \"No matches found.\",\n  };\n\n  // Log final shape\n  console.log(\n    `[${rid}] enrich/search → provider=${summary.provider} results=${qty} timings=${JSON.stringify(\n      summary.timings\n    )} guess=${JSON.stringify(summary.company_guess)}`\n  );\n\n  // Always 200 with normalized payload (frontend already handles empty)\n  return res.status(200).json({\n    ok: true,\n    data: {\n      results,\n      summary,\n    },\n  });\n}\n"
    },
    {
      "path": "routes/hrLeads.js",
      "size": 15982,
      "mtime": "2025-09-13T15:07:44.092Z",
      "sha256": "384515fa7f2d3cf4d7d915fd44d2cdea9677dbbc91f64962dc0b75315c9391a0",
      "imports": [
        "import express from \"express\";",
        "import { pool } from \"../utils/db.js\";",
        "import { ok, bad } from \"../utils/respond.js\";",
        "import { adminOnly } from \"../utils/adminOnly.js\";"
      ],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "// routes/hrLeads.js\nimport express from \"express\";\nimport { pool } from \"../utils/db.js\";\nimport { ok, bad } from \"../utils/respond.js\";\nimport { adminOnly } from \"../utils/adminOnly.js\";\nimport {\n  UAE_LOCATIONS,\n  isValidLeadStatus,\n  isValidEmailStatus,\n  isValidLocation,\n} from \"../utils/validators.js\";\n\nconst router = express.Router();\n\n/* ------------------------------ helpers ------------------------------ */\n\nfunction normalizeLocations(value) {\n  if (!value) return null;\n  const arr = Array.isArray(value) ? value : String(value).split(\",\");\n  const cleaned = Array.from(\n    new Set(\n      arr\n        .map((s) => String(s).trim())\n        .filter(Boolean)\n        .filter((s) => isValidLocation(s))\n    )\n  );\n  return cleaned.length ? cleaned : null;\n}\n\n/** Accepts various form/UI aliases and returns a normalized object */\nfunction aliasBody(body = {}) {\n  const companyName = body.company_name ?? body.company ?? null;\n  return {\n    company_id: body.company_id ?? null,\n    company_name: companyName,\n    name: body.name ?? null,\n    designation: body.designation ?? body.title ?? null,\n    linkedin_url: body.linkedin_url ?? body.linkedin ?? null,\n    location: body.location ?? null,",
      "tail": "            b.linkedin_url,\n            locArr,\n            b.mobile,\n            b.email,\n            b.email_status || \"unknown\",\n            b.lead_status || \"New\",\n            b.status_remarks || null,\n          ]\n        );\n\n        results.push({ ok: true, id: ins.rows[0].id });\n      } catch (err) {\n        results.push({ ok: false, error: err.message });\n      }\n    }\n\n    return ok(res, { count: results.length, results });\n  } catch (e) {\n    console.error(e);\n    return bad(res, \"server error\", 500);\n  }\n});\n\nexport default router;\n"
    },
    {
      "path": "routes/news.js",
      "size": 2091,
      "mtime": "2025-09-13T12:08:02.783Z",
      "sha256": "9b4aca7dc5aa98fb9713009e51b015b129697ce0e4e07eb76b5d29ac22709022",
      "imports": [
        "import express from \"express\";",
        "import { pool } from \"../utils/db.js\";",
        "import { ok, bad } from \"../utils/respond.js\";"
      ],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "// routes/news.js\nimport express from \"express\";\nimport { pool } from \"../utils/db.js\";\nimport { ok, bad } from \"../utils/respond.js\";\n\nconst router = express.Router();\n\nrouter.get(\"/\", async (req, res) => {\n  try {\n    const { tag, days, q } = req.query;\n    const where = [], params = [];\n    if (q) { params.push(`%${q}%`); where.push(`(LOWER(title) LIKE LOWER($${params.length}) OR LOWER(summary) LIKE LOWER($${params.length}))`); }\n    if (tag) { params.push(tag); where.push(`$${params.length} = ANY(tags)`); }\n    if (days) { params.push(days); where.push(`published_at >= now() - ($${params.length}::text || ' days')::interval`); }\n    const clause = where.length ? `WHERE ${where.join(\" AND \")}` : \"\";\n    const r = await pool.query(`SELECT * FROM news_items ${clause} ORDER BY published_at DESC LIMIT 200`, params);\n    return ok(res, r.rows);\n  } catch (e) {\n    console.error(e);\n    return bad(res, \"server error\", 500);\n  }\n});\n\nrouter.post(\"/ingest\", async (req, res) => {\n  try {\n    const items = Array.isArray(req.body?.items) ? req.body.items : [];\n    if (!items.length) return bad(res, \"items[] required\");\n    const vals = [];\n    for (const it of items) {\n      vals.push([\n        it.company_name || null,\n        it.company_id || null,\n        it.title || null,\n        it.summary || null,\n        it.url || null,\n        it.source || null,\n        it.published_at || null,\n        Array.isArray(it.tags) ? it.tags : [],\n        it.score ?? 0,\n      ]);",
      "tail": "        it.url || null,\n        it.source || null,\n        it.published_at || null,\n        Array.isArray(it.tags) ? it.tags : [],\n        it.score ?? 0,\n      ]);\n    }\n    const placeholders = vals\n      .map((_, i) => `($${i * 9 + 1},$${i * 9 + 2},$${i * 9 + 3},$${i * 9 + 4},$${i * 9 + 5},$${i * 9 + 6},$${i * 9 + 7},$${i * 9 + 8},$${i * 9 + 9})`)\n      .join(\",\");\n    const flat = vals.flat();\n    const q = `\n      INSERT INTO news_items (company_name, company_id, title, summary, url, source, published_at, tags, score)\n      VALUES ${placeholders} RETURNING id\n    `;\n    const r = await pool.query(q, flat);\n    return ok(res, { inserted: r.rowCount });\n  } catch (e) {\n    console.error(e);\n    return bad(res, \"server error\", 500);\n  }\n});\n\nexport default router;\n"
    },
    {
      "path": "routes/sourcing.js",
      "size": 2833,
      "mtime": "2025-09-14T03:37:06.478Z",
      "sha256": "5997f557ec9968984b140900e9f5bb006f51420c53b2e318ed639d13e65fbc71",
      "imports": [
        "import express from \"express\";",
        "import { pool } from \"../utils/db.js\";",
        "import { ok, bad } from \"../utils/respond.js\";",
        "import { adminOnly } from \"../utils/adminOnly.js\";"
      ],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "// routes/sourcing.js\nimport express from \"express\";\nimport { pool } from \"../utils/db.js\";\nimport { ok, bad } from \"../utils/respond.js\";\nimport { adminOnly } from \"../utils/adminOnly.js\";\n\nconst router = express.Router();\n\n/** POST /api/sourcing/run { company_id, source? } */\nrouter.post(\"/run\", adminOnly, async (req, res) => {\n  try {\n    const { company_id, source = \"manual\" } = req.body || {};\n    if (!company_id) return bad(res, \"company_id required\");\n\n    // don’t enqueue if already running/pending\n    const dup = await pool.query(\n      `SELECT id FROM sourcing_jobs WHERE company_id=$1 AND status IN ('pending','running') LIMIT 1`,\n      [company_id]\n    );\n    if (dup.rowCount) return ok(res, { queued: false, job_id: dup.rows[0].id });\n\n    const ins = await pool.query(\n      `INSERT INTO sourcing_jobs (company_id, source, status)\n       VALUES ($1,$2,'pending') RETURNING *`,\n      [company_id, source]\n    );\n    return ok(res, { queued: true, job: ins.rows[0] });\n  } catch (e) {\n    console.error(e);\n    return bad(res, \"server error\", 500);\n  }\n});\n\n/**\n * POST /api/sourcing/cron\n * Enqueue jobs for high-priority companies if stale.\n */\nrouter.post(\"/cron\", adminOnly, async (_req, res) => {\n  try {\n    const toQueue = await pool.query(`",
      "tail": "});\n\n/** GET /api/sourcing/jobs?company_id=... */\nrouter.get(\"/jobs\", adminOnly, async (req, res) => {\n  try {\n    const { company_id } = req.query;\n    const params = [];\n    const where = [];\n    if (company_id) { params.push(company_id); where.push(`company_id=$${params.length}`); }\n    const clause = where.length ? `WHERE ${where.join(\" AND \")}` : \"\";\n    const r = await pool.query(\n      `SELECT * FROM sourcing_jobs ${clause}\n        ORDER BY created_at DESC\n        LIMIT 200`,\n      params\n    );\n    return ok(res, r.rows);\n  } catch (e) {\n    console.error(e);\n    return bad(res, \"server error\", 500);\n  }\n});\n\nexport default router;\n"
    },
    {
      "path": "routes/stats.js",
      "size": 1385,
      "mtime": "2025-09-14T05:07:00.945Z",
      "sha256": "1eacda634183ed36e5ee49e154f1f29710d154f4441ba272a4d9509ccac0c8c0",
      "imports": [
        "import express from \"express\";",
        "import { pool } from \"../utils/db.js\";",
        "import { ok, bad } from \"../utils/respond.js\";"
      ],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "// routes/stats.js\nimport express from \"express\";\nimport { pool } from \"../utils/db.js\";\nimport { ok, bad } from \"../utils/respond.js\";\n\nconst router = express.Router();\n\n/**\n * GET /api/stats\n * Returns summary counts + recent activity for the dashboard.\n */\nrouter.get(\"/\", async (_req, res) => {\n  try {\n    const [[companies], [leads], [msgs]] = await Promise.all([\n      pool.query(`SELECT COUNT(*)::int AS n FROM companies`),\n      pool.query(`SELECT COUNT(*)::int AS n FROM hr_leads`),\n      // If you don't have a messages table yet, this will return 0 via COALESCE:\n      pool.query(`SELECT COALESCE(SUM(1),0)::int AS n FROM messages`)\n        .catch(() => [{ n: 0 }]),\n    ]);\n\n    // Recent activity: last 3 leads with company + status\n    const { rows: recent } = await pool.query(\n      `SELECT id, company, designation AS role, status,\n              to_char(created_at AT TIME ZONE 'UTC','YYYY-MM-DD\"T\"HH24:MI:SS\"Z\"') AS created_at\n         FROM hr_leads\n     ORDER BY created_at DESC NULLS LAST\n        LIMIT 3`\n    );\n\n    return ok(res, {\n      companiesTracked: companies?.rows?.[0]?.n ?? 0,\n      leadsIdentified:  leads?.rows?.[0]?.n ?? 0,\n      outreachSent:     msgs?.rows?.[0]?.n ?? 0,\n      recentActivity:   recent,\n    });\n  } catch (e) {\n    console.error(\"stats error:\", e);\n    return bad(res, \"failed to load stats\", 500);\n  }",
      "tail": "    ]);\n\n    // Recent activity: last 3 leads with company + status\n    const { rows: recent } = await pool.query(\n      `SELECT id, company, designation AS role, status,\n              to_char(created_at AT TIME ZONE 'UTC','YYYY-MM-DD\"T\"HH24:MI:SS\"Z\"') AS created_at\n         FROM hr_leads\n     ORDER BY created_at DESC NULLS LAST\n        LIMIT 3`\n    );\n\n    return ok(res, {\n      companiesTracked: companies?.rows?.[0]?.n ?? 0,\n      leadsIdentified:  leads?.rows?.[0]?.n ?? 0,\n      outreachSent:     msgs?.rows?.[0]?.n ?? 0,\n      recentActivity:   recent,\n    });\n  } catch (e) {\n    console.error(\"stats error:\", e);\n    return bad(res, \"failed to load stats\", 500);\n  }\n});\n\nexport default router;\n"
    },
    {
      "path": "server.js",
      "size": 9112,
      "mtime": "2025-09-20T11:20:51.734Z",
      "sha256": "e2629bb4f63ced128a5c681a6b5850ceb46fa47d1a8bc24cdcd3c01b33283802",
      "imports": [
        "import express from \"express\";",
        "import path from \"path\";",
        "import fs from \"fs\";",
        "import os from \"os\";",
        "import jwt from \"jsonwebtoken\";",
        "import { fileURLToPath } from \"url\";",
        "\nimport { pool } from \"./utils/db.js\";",
        "import companiesRouter from \"./routes/companies.js\";",
        "import hrLeadsRouter from \"./routes/hrLeads.js\";",
        "import newsRouter from \"./routes/news.js\";",
        "import enrichRouter from \"./routes/enrich/index.js\";",
        "import { signJwt } from \"./utils/jwt.js\";"
      ],
      "envs": [
        "ADMIN_PASSWORD",
        "ADMIN_USERNAME",
        "JWT_SECRET",
        "NODE_ENV",
        "PORT",
        "UPR_ADMIN_PASS",
        "UPR_ADMIN_USER"
      ],
      "appUses": [
        "app.use(express.json({ limit: \"2mb\" }));",
        "app.use(express.urlencoded({ extended: true }));",
        "app.use(\"/api/companies\", companiesRouter);",
        "app.use(\"/api/hr-leads\", hrLeadsRouter);",
        "app.use(\"/api/news\", newsRouter);",
        "app.use(\"/api/enrich\", cookieToBearer, protectEnrich, enrichRouter);"
      ],
      "endpoints": [
        "app.get(\"/health\", (_req, res) => res.json({ ok: true }));"
      ],
      "head": "// server.js\nimport express from \"express\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport os from \"os\";\nimport jwt from \"jsonwebtoken\";\nimport { fileURLToPath } from \"url\";\n\nimport { pool } from \"./utils/db.js\";\nimport companiesRouter from \"./routes/companies.js\";\nimport hrLeadsRouter from \"./routes/hrLeads.js\";\nimport newsRouter from \"./routes/news.js\";\nimport enrichRouter from \"./routes/enrich/index.js\";\nimport { signJwt } from \"./utils/jwt.js\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst app = express();\nconst PORT = process.env.PORT || 10000;\n\n/* ---------- API caching off (prevents 304s on JSON endpoints) ---------- */\napp.set(\"etag\", false);\n\n/* ------------------------------ helpers (auth) ------------------------------ */\nconst COOKIE_NAME = \"upr_jwt\";\nconst isProd = process.env.NODE_ENV === \"production\";\n\nfunction getCookie(req, name) {\n  const str = req.headers?.cookie || \"\";\n  if (!str) return null;\n  const pairs = str.split(\";\").map((s) => s.trim().split(\"=\"));\n  const map = Object.fromEntries(pairs);\n  const v = map[name];\n  return v ? decodeURIComponent(v) : null;\n}\n\nfunction setAuthCookie(res, token) {\n  const parts = [\n    `${COOKIE_NAME}=${encodeURIComponent(token)}`,",
      "tail": "\nif (fs.existsSync(dashboardDist)) {\n  app.use(\n    express.static(dashboardDist, {\n      setHeaders: (res, filePath) => {\n        if (filePath.endsWith(\".html\")) {\n          res.setHeader(\"Cache-Control\", \"no-store, must-revalidate\");\n        }\n      },\n    })\n  );\n\n  const indexFile = path.join(dashboardDist, \"index.html\");\n\n  app.get(/^(?!\\/api\\/).*/, (_req, res) => {\n    res.setHeader(\"Cache-Control\", \"no-store, must-revalidate\");\n    res.sendFile(indexFile);\n  });\n}\n\n/* ---------------------------------- Start ---------------------------------- */\napp.listen(PORT, () => {\n  console.log(`UPR backend listening on ${PORT}`);\n});\n"
    },
    {
      "path": "utils/adminOnly.js",
      "size": 438,
      "mtime": "2025-09-20T09:44:50.676Z",
      "sha256": "c5cd6663e58466e003e51910f3755d3034b9821ee54586791068f5b53ca9a142",
      "imports": [
        "import { getJwtFromRequest, verifyJwt } from \"./jwt.js\";"
      ],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "// utils/adminOnly.js\nimport { getJwtFromRequest, verifyJwt } from \"./jwt.js\";\n\nexport function adminOnly(req, res, next) {\n  const token = getJwtFromRequest(req);\n  if (!token) return res.status(401).json({ ok: false, error: \"unauthorized\" });\n  const decoded = verifyJwt(token);\n  if (!decoded) return res.status(401).json({ ok: false, error: \"unauthorized\" });\n\n  req.user = decoded; // { sub, role, iat, exp, ... }\n  return next();\n}\n",
      "tail": "// utils/adminOnly.js\nimport { getJwtFromRequest, verifyJwt } from \"./jwt.js\";\n\nexport function adminOnly(req, res, next) {\n  const token = getJwtFromRequest(req);\n  if (!token) return res.status(401).json({ ok: false, error: \"unauthorized\" });\n  const decoded = verifyJwt(token);\n  if (!decoded) return res.status(401).json({ ok: false, error: \"unauthorized\" });\n\n  req.user = decoded; // { sub, role, iat, exp, ... }\n  return next();\n}\n"
    },
    {
      "path": "utils/ai.js",
      "size": 7228,
      "mtime": "2025-09-14T05:08:22.878Z",
      "sha256": "dadd50847aa710ae36e44567cd001ce26450f888e57f0ee864aae256d174144d",
      "imports": [
        "import crypto from \"crypto\";"
      ],
      "envs": [
        "OPENAI_API_KEY",
        "OPENAI_MODEL"
      ],
      "appUses": [],
      "endpoints": [],
      "head": "// utils/ai.js\nimport crypto from \"crypto\";\n\n/**\n * aiEnrichFromInput(input: string) -> {\n *   company: { name, domain, website, linkedin, hq, industry, size, notes },\n *   contacts: [{ id, name, title, dept, email, email_guess, email_status, linkedin, confidence, score }],\n *   score, tags, outreachDraft,\n *   meta: { llm: 'openai' | 'rules', took_ms: number }\n * }\n */\n\nfunction titleCase(s) {\n  if (!s) return s;\n  return s\n    .toLowerCase()\n    .split(/\\s+/)\n    .map(w => (w.length ? w[0].toUpperCase() + w.slice(1) : w))\n    .join(\" \");\n}\nfunction looksLikeDomain(s) { return /\\b[a-z0-9-]+\\.[a-z]{2,}\\b/i.test(s || \"\"); }\nfunction firstNonEmpty(...vals) { return vals.find(v => !!(v && String(v).trim())) || null; }\n\nfunction candidatesFromName(name) {\n  const cleaned = String(name || \"\").replace(/[^a-z0-9 ]/gi, \" \").trim();\n  if (!cleaned) return [];\n  const parts = cleaned.split(/\\s+/).slice(0, 3);\n  const base = parts.join(\"\");\n  // Try common UAE/tech TLDs\n  return [`${base}.com`, `${base}.ae`, `${base}.ai`];\n}\n\nasync function probeDomain(url) {\n  // best-effort: check if HEAD 200-ish; ignore failures\n  try {\n    const u = url.startsWith(\"http\") ? url : `https://${url}`;\n    const r = await fetch(u, { method: \"HEAD\" });\n    if (r.ok) return new URL(u).hostname;\n  } catch {}\n  return null;",
      "tail": "  if (/hr|talent|people/i.test(trimmed)) tags.push(\"HR\");\n\n  const pc = contacts[0];\n  const outreachDraft =\n`Subject: Partnership with ${company.name}\n\nHi ${pc?.name || \"there\"},\n\nI’m reaching out about ${company.name}. We help HR teams cut sourcing time and improve lead quality with an enrichment + outreach workflow tailored to ${company.hq || \"your region\"}.\n\nIf helpful, I can share a shortlist for your current roles within 24 hours.\n\nBest,\nUPR Team`;\n\n  return {\n    company,\n    contacts,\n    score,\n    tags,\n    outreachDraft,\n    meta: { llm: useLLM ? \"openai\" : \"rules\", took_ms: Date.now() - started },\n  };\n}\n"
    },
    {
      "path": "utils/apollo.js",
      "size": 88,
      "mtime": "2025-09-14T16:26:45.152Z",
      "sha256": "ebb345093561efd00e9088efdb6fd89e852f71f414f615540fa5fd31b3ecce85",
      "imports": [],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "export * from './providers/apollo.js';\nexport { default } from './providers/apollo.js';\n",
      "tail": "export * from './providers/apollo.js';\nexport { default } from './providers/apollo.js';\n"
    },
    {
      "path": "utils/db.js",
      "size": 993,
      "mtime": "2025-09-13T15:11:29.073Z",
      "sha256": "cb3b97a0ed9f6485c20db51a432d4270ddc98ce8971e9a97b02d08eed04b15eb",
      "imports": [
        "import pg from \"pg\";"
      ],
      "envs": [
        "DATABASE_URL",
        "PGPOOL_MAX",
        "PGSSLMODE",
        "POSTGRES_URL"
      ],
      "appUses": [],
      "endpoints": [],
      "head": "// utils/db.js\nimport pg from \"pg\";\nconst { Pool } = pg;\n\n// Prefer DATABASE_URL (Render/Heroku-style), fall back to POSTGRES_URL\nconst connectionString =\n  process.env.DATABASE_URL || process.env.POSTGRES_URL || null;\n\nif (!connectionString) {\n  console.warn(\n    \"[db] No DATABASE_URL/POSTGRES_URL set; queries will fail until configured.\"\n  );\n}\n\nexport const pool = new Pool({\n  connectionString,\n  // Enable SSL in hosted environments that require it\n  ssl:\n    process.env.PGSSLMODE === \"require\" ||\n    (connectionString && !connectionString.includes(\"localhost\"))\n      ? { rejectUnauthorized: false }\n      : undefined,\n  max: parseInt(process.env.PGPOOL_MAX || \"10\", 10),\n  idleTimeoutMillis: 30_000,\n});\n\n/** Convenience wrappers (optional) */\nexport async function query(text, params) {\n  return pool.query(text, params);\n}\nexport async function withClient(fn) {\n  const client = await pool.connect();\n  try {\n    return await fn(client);\n  } finally {\n    client.release();\n  }\n}\n",
      "tail": "export const pool = new Pool({\n  connectionString,\n  // Enable SSL in hosted environments that require it\n  ssl:\n    process.env.PGSSLMODE === \"require\" ||\n    (connectionString && !connectionString.includes(\"localhost\"))\n      ? { rejectUnauthorized: false }\n      : undefined,\n  max: parseInt(process.env.PGPOOL_MAX || \"10\", 10),\n  idleTimeoutMillis: 30_000,\n});\n\n/** Convenience wrappers (optional) */\nexport async function query(text, params) {\n  return pool.query(text, params);\n}\nexport async function withClient(fn) {\n  const client = await pool.connect();\n  try {\n    return await fn(client);\n  } finally {\n    client.release();\n  }\n}\n"
    },
    {
      "path": "utils/emailPatterns.js",
      "size": 2991,
      "mtime": "2025-09-15T17:57:38.669Z",
      "sha256": "9b6e21504b2574550d3a018c707c1dfb51978b568ed303ff2faad59f2ac0cc3c",
      "imports": [
        "import { pool } from \"./db.js\";"
      ],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "// utils/emailPatterns.js\nimport { pool } from \"./db.js\";\n\nconst DEFAULT_PATTERNS = [\n  \"{first}.{last}@{domain}\",\n  \"{f}{last}@{domain}\",\n  \"{first}{l}@{domain}\",\n  \"{first}@{domain}\",\n  \"{first}_{last}@{domain}\",\n  \"{last}{f}@{domain}\",\n  \"{first}-{last}@{domain}\",\n];\n\nexport function applyPattern(first, last, pattern, domain) {\n  const f = (first || \"\").toLowerCase().replace(/[^a-z]/g, \"\");\n  const l = (last || \"\").toLowerCase().replace(/[^a-z]/g, \"\");\n  return pattern\n    .replace(\"{first}\", f)\n    .replace(\"{last}\", l)\n    .replace(\"{f}\", f.slice(0, 1))\n    .replace(\"{l}\", l.slice(0, 1))\n    .replace(\"{domain}\", domain);\n}\n\n/**\n * Given sample emails (name+email) of the same domain, infer the most likely pattern.\n * @param {Array<{name:string,email:string}>} samples\n * @param {string} domain\n * @returns {{pattern:string, confidence:number}|null}\n */\nexport function inferPatternFromSamples(samples, domain) {\n  const counts = new Map();\n  for (const s of samples) {\n    const [first, last] = splitName(s.name);\n    if (!first) continue;\n    for (const p of DEFAULT_PATTERNS) {\n      const guess = applyPattern(first, last, p, domain);\n      if (eqEmail(guess, s.email)) counts.set(p, (counts.get(p) || 0) + 1);\n    }\n  }",
      "tail": "  } catch (e) {\n    if (String(e?.code) === \"42P01\") return null; // table missing\n    throw e;\n  }\n}\n\nexport async function savePatternToCache(dbOrPool, domain, pattern, sample_email, confidence = 0.7) {\n  const db = dbOrPool?.query ? dbOrPool : pool;\n  const q = `\n    INSERT INTO email_pattern_cache (domain, pattern, sample_email, confidence, updated_at)\n    VALUES ($1,$2,$3,$4, now())\n    ON CONFLICT (domain) DO UPDATE SET\n      pattern = EXCLUDED.pattern,\n      sample_email = EXCLUDED.sample_email,\n      confidence = EXCLUDED.confidence,\n      updated_at = now()\n  `;\n  try {\n    await db.query(q, [domain, pattern, sample_email || null, confidence]);\n  } catch (e) {\n    if (String(e?.code) === \"42P01\") return; // table not present yet: skip\n    throw e;\n  }\n}\n"
    },
    {
      "path": "utils/emailVerify.js",
      "size": 2109,
      "mtime": "2025-09-15T17:45:51.988Z",
      "sha256": "342a6f21fb9b49a3aed964e8fa063bd92299323a8b1e17d23ccf9e2123ffb714",
      "imports": [],
      "envs": [
        "NEVERBOUNCE_API_KEY",
        "ZEROBOUNCE_API_KEY"
      ],
      "appUses": [],
      "endpoints": [],
      "head": "// utils/emailVerify.js\n\nexport async function verifyEmail(email) {\n  if (process.env.NEVERBOUNCE_API_KEY) {\n    try {\n      const resp = await fetch(\"https://api.neverbounce.com/v4/single/check\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          key: process.env.NEVERBOUNCE_API_KEY,\n          email,\n          address_info: 0,\n          credits_info: 0,\n        }),\n      });\n      const data = await resp.json();\n      return mapNeverBounce(data?.result || data?.verification?.result);\n    } catch {\n      return { status: \"unknown\", reason: \"neverbounce_error\" };\n    }\n  }\n\n  if (process.env.ZEROBOUNCE_API_KEY) {\n    try {\n      const url = new URL(\"https://api.zerobounce.net/v2/validate\");\n      url.searchParams.set(\"api_key\", process.env.ZEROBOUNCE_API_KEY);\n      url.searchParams.set(\"email\", email);\n      const resp = await fetch(url.toString());\n      const data = await resp.json();\n      return mapZeroBounce(data?.status);\n    } catch {\n      return { status: \"unknown\", reason: \"zerobounce_error\" };\n    }\n  }\n\n  if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) return { status: \"invalid\", reason: \"regex\" };\n  return { status: \"unknown\", reason: \"no_verifier_configured\" };\n}\n\nfunction mapNeverBounce(code) {",
      "tail": "    case \"invalid\":\n      return { status: \"invalid\" };\n    case \"disposable\":\n      return { status: \"invalid\", reason: \"disposable\" };\n    case \"do_not_mail\":\n      return { status: \"invalid\", reason: \"do_not_mail\" };\n    default:\n      return { status: \"unknown\" };\n  }\n}\nfunction mapZeroBounce(code) {\n  switch (String(code).toLowerCase()) {\n    case \"valid\":\n      return { status: \"valid\" };\n    case \"catch-all\":\n    case \"unknown\":\n    case \"accept_all\":\n      return { status: \"accept_all\" };\n    case \"invalid\":\n      return { status: \"invalid\" };\n    default:\n      return { status: \"unknown\" };\n  }\n}\n"
    },
    {
      "path": "utils/jwt.js",
      "size": 1271,
      "mtime": "2025-09-20T09:44:40.223Z",
      "sha256": "7262f7f29ca145fb082b89fb4209997da7417c5e0bbdbb0c0bc00b9d00326967",
      "imports": [
        "import jwt from \"jsonwebtoken\";"
      ],
      "envs": [
        "JWT_SECRET",
        "NODE_ENV"
      ],
      "appUses": [],
      "endpoints": [],
      "head": "// utils/jwt.js\nimport jwt from \"jsonwebtoken\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"dev_upr_secret\";\nconst COOKIE_NAME = \"upr_session\";\n\nexport function signJwt(payload, expiresIn = \"12h\") {\n  return jwt.sign(payload, JWT_SECRET, { expiresIn });\n}\n\nexport function verifyJwt(token) {\n  try {\n    return jwt.verify(token, JWT_SECRET);\n  } catch {\n    return null;\n  }\n}\n\n/** Read JWT from Authorization: Bearer … header OR from HttpOnly cookie. */\nexport function getJwtFromRequest(req) {\n  const h = req.headers?.authorization || req.headers?.Authorization;\n  if (h && typeof h === \"string\" && h.startsWith(\"Bearer \")) {\n    return h.slice(\"Bearer \".length).trim();\n  }\n  // cookie-parser populates req.cookies\n  const c = req.cookies?.[COOKIE_NAME];\n  if (c) return c;\n  return null;\n}\n\nexport function setSessionCookie(res, token, hours = 12) {\n  const secure = process.env.NODE_ENV === \"production\";\n  res.cookie(COOKIE_NAME, token, {\n    httpOnly: true,\n    secure,\n    sameSite: \"lax\",\n    maxAge: hours * 60 * 60 * 1000,\n    path: \"/\",\n  });\n}",
      "tail": "  if (c) return c;\n  return null;\n}\n\nexport function setSessionCookie(res, token, hours = 12) {\n  const secure = process.env.NODE_ENV === \"production\";\n  res.cookie(COOKIE_NAME, token, {\n    httpOnly: true,\n    secure,\n    sameSite: \"lax\",\n    maxAge: hours * 60 * 60 * 1000,\n    path: \"/\",\n  });\n}\n\nexport function clearSessionCookie(res) {\n  const secure = process.env.NODE_ENV === \"production\";\n  res.clearCookie(COOKIE_NAME, {\n    httpOnly: true,\n    secure,\n    sameSite: \"lax\",\n    path: \"/\",\n  });\n}\n"
    },
    {
      "path": "utils/normalize.js",
      "size": 646,
      "mtime": "2025-09-14T16:21:07.207Z",
      "sha256": "8f73e614c22b47755e634f50d26895a9437a763fa1b28d792266452f98835070",
      "imports": [],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "// utils/normalize.js\nexport function normalizeDomain(input) {\n  if (!input) return null;\n  let s = String(input).trim();\n  try {\n    if (!/^https?:\\/\\//i.test(s)) s = \"https://\" + s;\n    const u = new URL(s);\n    let host = u.hostname.toLowerCase();\n    if (host.startsWith(\"www.\")) host = host.slice(4);\n    return host || null;\n  } catch {\n    // not a URL, maybe already a domain\n    let host = s.toLowerCase();\n    if (host.startsWith(\"www.\")) host = host.slice(4);\n    return host || null;\n  }\n}\n\nexport function includesNormalized(a, b) {\n  if (!a || !b) return false;\n  return String(a).toLowerCase().includes(String(b).toLowerCase());\n}\n",
      "tail": "// utils/normalize.js\nexport function normalizeDomain(input) {\n  if (!input) return null;\n  let s = String(input).trim();\n  try {\n    if (!/^https?:\\/\\//i.test(s)) s = \"https://\" + s;\n    const u = new URL(s);\n    let host = u.hostname.toLowerCase();\n    if (host.startsWith(\"www.\")) host = host.slice(4);\n    return host || null;\n  } catch {\n    // not a URL, maybe already a domain\n    let host = s.toLowerCase();\n    if (host.startsWith(\"www.\")) host = host.slice(4);\n    return host || null;\n  }\n}\n\nexport function includesNormalized(a, b) {\n  if (!a || !b) return false;\n  return String(a).toLowerCase().includes(String(b).toLowerCase());\n}\n"
    },
    {
      "path": "utils/patternCache.js",
      "size": 983,
      "mtime": "2025-09-14T03:55:08.008Z",
      "sha256": "abb445ea1196aa9f5f33e6ef346dfed254d61e0b748fef50316a059f2c91f64e",
      "imports": [],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "// utils/patternCache.js\n// Exports:\n//  - getDomainPattern(domain) -> { domain, pattern_id, verified_count } | null\n//  - setDomainPattern({ domain, pattern_id, source, example, incrementVerified }) -> void\n//\n// This is an in-memory cache by default. Replace with Postgres persistence later.\n\nconst mem = new Map();\n\nexport async function getDomainPattern(domain) {\n  const d = (domain || \"\").toLowerCase();\n  if (!d) return null;\n  return mem.get(d) || null;\n}\n\nexport async function setDomainPattern({ domain, pattern_id, source, example, incrementVerified }) {\n  const d = (domain || \"\").toLowerCase();\n  if (!d || !pattern_id) return;\n  const prev = mem.get(d) || { domain: d, pattern_id: null, verified_count: 0 };\n  mem.set(d, {\n    domain: d,\n    pattern_id,\n    verified_count: prev.verified_count + (incrementVerified ? 1 : 0),\n    source: source || prev.source || \"unknown\",\n    example: example || prev.example || null,\n    updated_at: new Date().toISOString(),\n  });\n}\n",
      "tail": "//\n// This is an in-memory cache by default. Replace with Postgres persistence later.\n\nconst mem = new Map();\n\nexport async function getDomainPattern(domain) {\n  const d = (domain || \"\").toLowerCase();\n  if (!d) return null;\n  return mem.get(d) || null;\n}\n\nexport async function setDomainPattern({ domain, pattern_id, source, example, incrementVerified }) {\n  const d = (domain || \"\").toLowerCase();\n  if (!d || !pattern_id) return;\n  const prev = mem.get(d) || { domain: d, pattern_id: null, verified_count: 0 };\n  mem.set(d, {\n    domain: d,\n    pattern_id,\n    verified_count: prev.verified_count + (incrementVerified ? 1 : 0),\n    source: source || prev.source || \"unknown\",\n    example: example || prev.example || null,\n    updated_at: new Date().toISOString(),\n  });\n}\n"
    },
    {
      "path": "utils/patternHelpers.js",
      "size": 1710,
      "mtime": "2025-09-15T17:57:51.212Z",
      "sha256": "3b155e40ca6105b1ebd61b0d9526f786e2f3179eedc4779ee6f7df796b886cb9",
      "imports": [],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "// utils/patternHelpers.js\n\nexport function bucketRole(title = \"\") {\n  const t = title.toLowerCase();\n  const hr = /(human\\s*resources|hr\\b|people|talent|recruit(ing|er)?|hrbp|comp(ensation)?|benefits|total\\s*rewards|hr\\s*ops|people\\s*ops)/;\n  return hr.test(t) ? \"hr\" : \"other\";\n}\n\nexport function bucketSeniority(title = \"\") {\n  const t = title.toLowerCase();\n  if (/(chief|chro|vp|vice\\s*president)/.test(t)) return \"cxo\";\n  if (/director|head/.test(t)) return \"director\";\n  if (/manager|lead/.test(t)) return \"manager\";\n  return \"ic\";\n}\n\nexport function isAgencyRecruiter(cand) {\n  const t = (cand.designation || \"\").toLowerCase();\n  const company = (cand.company_name || \"\").toLowerCase();\n  const agency = /(consultant|agency|headhunter|rpo|recruitment\\s*agency|talent\\s*partner\\s*\\(external\\))/;\n  return agency.test(t) || agency.test(company);\n}\n\n/**\n * Confidence scoring (0..1 rounded to 2 decimals)\n */\nexport function scoreCandidate({ role_bucket, seniority, geo_fit, email_status, company_match }) {\n  const role_fit = role_bucket === \"hr\" ? 1.0 : 0.0;\n  const seniority_fit =\n    seniority === \"cxo\" || seniority === \"director\" ? 1.0\n      : seniority === \"manager\" ? 0.8\n      : seniority === \"ic\" ? 0.4\n      : 0.0;\n\n  const email_verif =\n    email_status === \"valid\" ? 1.0\n      : email_status === \"accept_all\" ? 0.7\n      : email_status === \"patterned\" ? 0.3\n      : 0.0;\n",
      "tail": "  const seniority_fit =\n    seniority === \"cxo\" || seniority === \"director\" ? 1.0\n      : seniority === \"manager\" ? 0.8\n      : seniority === \"ic\" ? 0.4\n      : 0.0;\n\n  const email_verif =\n    email_status === \"valid\" ? 1.0\n      : email_status === \"accept_all\" ? 0.7\n      : email_status === \"patterned\" ? 0.3\n      : 0.0;\n\n  const gf = typeof geo_fit === \"number\" ? Math.max(0, Math.min(1, geo_fit)) : 0.6;\n  const cm = typeof company_match === \"number\" ? company_match : 1.0;\n\n  const score =\n    0.30 * role_fit +\n    0.25 * seniority_fit +\n    0.20 * gf +\n    0.15 * email_verif +\n    0.10 * cm;\n\n  return Math.round(score * 100) / 100;\n}\n"
    },
    {
      "path": "utils/providers/apollo.js",
      "size": 1762,
      "mtime": "2025-09-14T16:31:38.208Z",
      "sha256": "ef00a21698bd87c5acaabfd92ac6cd8a986282809b246345eb0f5a7288ed1237",
      "imports": [],
      "envs": [
        "APOLLO_API_KEY"
      ],
      "appUses": [],
      "endpoints": [],
      "head": "// utils/providers/apollo.js\n// Apollo People Search provider using Node 18+ global fetch (no node-fetch dep)\n\nconst APOLLO_BASE = \"https://api.apollo.io/api/v1\";\n\nfunction assertKey() {\n  if (!process.env.APOLLO_API_KEY) {\n    throw new Error(\"APOLLO_API_KEY missing\");\n  }\n}\n\nasync function apolloPost(path, body = {}) {\n  assertKey();\n  const resp = await fetch(`${APOLLO_BASE}${path}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Cache-Control\": \"no-cache\",\n      accept: \"application/json\",\n      \"x-api-key\": process.env.APOLLO_API_KEY,\n    },\n    body: JSON.stringify(body),\n  });\n\n  const text = await resp.text();\n  let json = null;\n  try {\n    json = text ? JSON.parse(text) : {};\n  } catch {\n    // fall through\n  }\n\n  if (!resp.ok) {\n    const errMsg = json?.error || json?.message || text || resp.statusText;\n    throw new Error(`Apollo ${path} ${resp.status}: ${errMsg}`);\n  }\n  return json ?? {};\n}\n\n/**",
      "tail": "    person_locations: locations,\n    person_titles: titles,\n  };\n\n  if (domain) {\n    const r1 = await apolloPost(\"/mixed_people/search\", {\n      ...basePayload,\n      q_organization_domains: [domain],\n    });\n    if ((r1.people?.length || 0) > 0) return r1.people;\n  }\n\n  if (orgName) {\n    const r2 = await apolloPost(\"/mixed_people/search\", {\n      ...basePayload,\n      organization_name: orgName,\n    });\n    if ((r2.people?.length || 0) > 0) return r2.people;\n  }\n\n  return [];\n}\n\nexport default { apolloMixedPeopleSearch };\n"
    },
    {
      "path": "utils/providers/sourcing.js",
      "size": 873,
      "mtime": "2025-09-14T10:09:26.419Z",
      "sha256": "1cd8f2e89186c344edf359991032b8301f72c76b33c466f7d6b1826cc025e06c",
      "imports": [
        "\nimport { fetchApolloContacts } from \"./sourcing_apollo.js\";"
      ],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "// utils/providers/sourcing.js\n//\n// Provider hub. We prefer Apollo for real-name sourcing.\n// Returns [] if no provider configured; we never fabricate contacts.\n\nimport { fetchApolloContacts } from \"./sourcing_apollo.js\";\n\nexport async function fetchContactsFromProviders({ company, departments = [], min = 3 }) {\n  const out = [];\n\n  // Apollo (requires APOLLO_API_KEY)\n  try {\n    const ap = await fetchApolloContacts({ company, departments, limit: Math.max(min, 10) });\n    if (Array.isArray(ap) && ap.length) out.push(...ap);\n  } catch {\n    // ignore provider errors\n  }\n\n  // Future: add additional providers (PDL, Coresignal, etc.)\n\n  // Dedup by lowercased name\n  const seen = new Set();\n  return out.filter((c) => {\n    const k = (c.name || \"\").toLowerCase();\n    if (!k) return false;\n    if (seen.has(k)) return false;\n    seen.add(k);\n    return true;\n  });\n}\n",
      "tail": "\nexport async function fetchContactsFromProviders({ company, departments = [], min = 3 }) {\n  const out = [];\n\n  // Apollo (requires APOLLO_API_KEY)\n  try {\n    const ap = await fetchApolloContacts({ company, departments, limit: Math.max(min, 10) });\n    if (Array.isArray(ap) && ap.length) out.push(...ap);\n  } catch {\n    // ignore provider errors\n  }\n\n  // Future: add additional providers (PDL, Coresignal, etc.)\n\n  // Dedup by lowercased name\n  const seen = new Set();\n  return out.filter((c) => {\n    const k = (c.name || \"\").toLowerCase();\n    if (!k) return false;\n    if (seen.has(k)) return false;\n    seen.add(k);\n    return true;\n  });\n}\n"
    },
    {
      "path": "utils/providers/sourcing_apollo.js",
      "size": 4313,
      "mtime": "2025-09-14T10:50:03.092Z",
      "sha256": "0d85801ceae3eb66bde60593ae1d40fb2948d365bcfc347a76850a27255edb98",
      "imports": [],
      "envs": [
        "APOLLO_API_KEY",
        "APOLLO_DEFAULT_COUNTRY"
      ],
      "appUses": [],
      "endpoints": [],
      "head": "// utils/providers/sourcing_apollo.js\n//\n// Apollo provider adapter: fetch real people by company + departments.\n// Auth via header: X-Api-Key (per Apollo deprecation notice).\n//\n// Scopes needed:\n//   - api/v1/people/search   (required)\n//   - api/v1/mixed_people/search (tick if visible; we fall back to it)\n// Optional:\n//   - api/v1/organizations/search, api/v1/organizations/show\n//\n// ENV:\n//   APOLLO_API_KEY=sk_... (required)\n//   APOLLO_DEFAULT_COUNTRY=\"United Arab Emirates\" (optional)\n//\n// Notes:\n// - We do discovery only (no email reveal). UPR will pattern+SMTP-verify.\n// - We filter to real names (must contain space) and map dept from title.\n\nconst API_KEY = process.env.APOLLO_API_KEY || null;\nconst DEFAULT_COUNTRY = process.env.APOLLO_DEFAULT_COUNTRY || \"United Arab Emirates\";\n\nconst TITLE_MAP = {\n  hr: [\"hr\", \"human resources\", \"people\"],\n  hrbp: [\"hrbp\", \"business partner\"],\n  ta: [\"talent\", \"recruit\", \"acquisition\", \"sourcing\"],\n  payroll: [\"payroll\"],\n  finance: [\"finance\", \"account\", \"controller\", \"cfo\", \"fp&a\"],\n  admin: [\"admin\", \"administration\"],\n  office_admin: [\"office admin\", \"office manager\", \"facilities\"],\n  onboarding: [\"onboarding\", \"people operations\", \"people ops\"],\n};\n\nfunction cleanStr(s){ if(!s) return null; const t=String(s).trim(); return t.length?t:null; }\nfunction uniq(a){ return [...new Set((a||[]).filter(Boolean))]; }\nfunction normDomain(u){\n  try { return new URL(u).hostname; }\n  catch { const s=String(u||\"\").trim().toLowerCase(); return /^[a-z0-9.-]+\\.[a-z]{2,}$/.test(s)?s:null; }\n}\nfunction buildTitleQuery(departments=[]){",
      "tail": "    \"Content-Type\": \"application/json\",\n    \"Cache-Control\": \"no-cache\",\n    \"X-Api-Key\": API_KEY,\n  };\n\n  // Try people/search first, then mixed_people/search\n  const endpoints = [\n    \"https://api.apollo.io/api/v1/people/search\",\n    \"https://api.apollo.io/api/v1/mixed_people/search\",\n  ];\n\n  for (const url of endpoints){\n    try {\n      const resp = await fetch(url, { method: \"POST\", headers, body: JSON.stringify(body) });\n      if (!resp.ok) continue;\n      const data = await resp.json();\n      const people = Array.isArray(data?.people) ? data.people :\n                     Array.isArray(data?.contacts) ? data.contacts : [];\n      const contacts = mapPeopleToContacts(people);\n      if (contacts.length) return contacts;\n    } catch { /* try next */ }\n  }\n  return [];\n}\n"
    },
    {
      "path": "utils/qscore.js",
      "size": 415,
      "mtime": "2025-09-13T12:07:10.256Z",
      "sha256": "7e067803d22b901044ed9077929017457fd31f891bd69a3f8932fa4274eecc43",
      "imports": [],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "// utils/qscore.js\nexport function computeQScore(company, newsRows = []) {\n  let score = 0;\n  if (company.type === \"ALE\") score += 10;\n  if (Array.isArray(company.locations) && company.locations.length > 1) score += 5;\n  const hiring = newsRows.some(n => Array.isArray(n.tags) && (n.tags.includes(\"hiring\") || n.tags.includes(\"expansion\")));\n  if (hiring) score += 15;\n  return Math.max(0, Math.min(100, score));\n}\n",
      "tail": "// utils/qscore.js\nexport function computeQScore(company, newsRows = []) {\n  let score = 0;\n  if (company.type === \"ALE\") score += 10;\n  if (Array.isArray(company.locations) && company.locations.length > 1) score += 5;\n  const hiring = newsRows.some(n => Array.isArray(n.tags) && (n.tags.includes(\"hiring\") || n.tags.includes(\"expansion\")));\n  if (hiring) score += 15;\n  return Math.max(0, Math.min(100, score));\n}\n"
    },
    {
      "path": "utils/respond.js",
      "size": 198,
      "mtime": "2025-09-13T12:06:56.253Z",
      "sha256": "e7416b8a0b80da8bf89666a5eec8b0586eb58c622c22a4e48187b664d9d1c940",
      "imports": [],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "// utils/respond.js\nexport function ok(res, data) {\n  return res.json({ ok: true, data });\n}\nexport function bad(res, msg, code = 400) {\n  return res.status(code).json({ ok: false, error: msg });\n}\n",
      "tail": "// utils/respond.js\nexport function ok(res, data) {\n  return res.json({ ok: true, data });\n}\nexport function bad(res, msg, code = 400) {\n  return res.status(code).json({ ok: false, error: msg });\n}\n"
    },
    {
      "path": "utils/smtpVerify.js",
      "size": 2346,
      "mtime": "2025-09-15T17:58:05.194Z",
      "sha256": "602a9ec6c40b68924acd95bee07120bd6ec549188a1284831275ef783a12fcab",
      "imports": [],
      "envs": [
        "NEVERBOUNCE_API_KEY",
        "ZEROBOUNCE_API_KEY"
      ],
      "appUses": [],
      "endpoints": [],
      "head": "// utils/emailVerify.js\n\n/**\n * Verify an email address using NeverBounce or ZeroBounce when available.\n * Returns { status: 'valid'|'accept_all'|'unknown'|'invalid'|'bounced', reason?: string }\n */\nexport async function verifyEmail(email) {\n  // NeverBounce\n  if (process.env.NEVERBOUNCE_API_KEY) {\n    try {\n      const resp = await fetch(\"https://api.neverbounce.com/v4/single/check\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          key: process.env.NEVERBOUNCE_API_KEY,\n          email,\n          address_info: 0,\n          credits_info: 0,\n        }),\n      });\n      const data = await resp.json();\n      return mapNeverBounce(data?.result || data?.verification?.result);\n    } catch {\n      return { status: \"unknown\", reason: \"neverbounce_error\" };\n    }\n  }\n\n  // ZeroBounce\n  if (process.env.ZEROBOUNCE_API_KEY) {\n    try {\n      const url = new URL(\"https://api.zerobounce.net/v2/validate\");\n      url.searchParams.set(\"api_key\", process.env.ZEROBOUNCE_API_KEY);\n      url.searchParams.set(\"email\", email);\n      const resp = await fetch(url.toString());\n      const data = await resp.json();\n      return mapZeroBounce(data?.status);\n    } catch {\n      return { status: \"unknown\", reason: \"zerobounce_error\" };\n    }\n  }",
      "tail": "    case \"invalid\":\n      return { status: \"invalid\" };\n    case \"disposable\":\n      return { status: \"invalid\", reason: \"disposable\" };\n    case \"do_not_mail\":\n      return { status: \"invalid\", reason: \"do_not_mail\" };\n    default:\n      return { status: \"unknown\" };\n  }\n}\nfunction mapZeroBounce(code) {\n  switch (String(code).toLowerCase()) {\n    case \"valid\":\n      return { status: \"valid\" };\n    case \"catch-all\":\n    case \"unknown\":\n    case \"accept_all\":\n      return { status: \"accept_all\" };\n    case \"invalid\":\n      return { status: \"invalid\" };\n    default:\n      return { status: \"unknown\" };\n  }\n}\n"
    },
    {
      "path": "utils/validators.js",
      "size": 4738,
      "mtime": "2025-09-13T14:48:06.014Z",
      "sha256": "96d7f2e825ed0a1a3bc29e5b2e7dc0e017808d1c430cc6cf04418702445d2284",
      "imports": [],
      "envs": [],
      "appUses": [],
      "endpoints": [],
      "head": "// utils/validators.js\n\n// ---- Canonical enums (stored/displayed exactly like this) ----\nexport const COMPANY_TYPES = [\"ALE\", \"NON_ALE\", \"Good Coded\"];\n\nexport const COMPANY_STATUSES = [\n  \"New\",\n  \"Contacted\",\n  \"Response Received\",\n  \"Converted\",\n  \"Declined\",\n];\n\nexport const LEAD_STATUSES = [\n  \"New\",\n  \"Contacted\",\n  \"Response Received\",\n  \"Follow-up 1\",\n  \"Follow-up 2\",\n  \"Follow-up 3\",\n  \"Follow-up 4\",\n  \"Converted\",\n  \"Declined\",\n];\n\nexport const EMAIL_STATUSES = [\"unknown\", \"patterned\", \"guessed\", \"validated\", \"bounced\"];\n\nexport const UAE_LOCATIONS = [\"Abu Dhabi\", \"Dubai\", \"Sharjah\"];\n\n// ---- Synonym maps (case/spacing insensitive) ----\n// We normalize input then map to a canonical value.\nconst CTYPE_ALIASES = new Map([\n  [\"ale\", \"ALE\"],\n  [\"non_ale\", \"NON_ALE\"],\n  [\"non-ale\", \"NON_ALE\"],\n  [\"non ale\", \"NON_ALE\"],\n  [\"nonale\", \"NON_ALE\"],\n  [\"good coded\", \"Good Coded\"],\n  [\"good_coded\", \"Good Coded\"],\n  [\"good-coded\", \"Good Coded\"],",
      "tail": "}\nexport function isValidCompanyStatus(s) {\n  return normalizeCompanyStatus(s) !== null;\n}\nexport function isValidEmailStatus(s) {\n  return normalizeEmailStatus(s) !== null;\n}\nexport function isValidLeadStatus(s) {\n  return normalizeLeadStatus(s) !== null;\n}\nexport function isValidLocation(loc) {\n  return normalizeLocation(loc) !== null;\n}\n\n// ---- Convenience: normalize an array of locations ----\nexport function normalizeLocations(list = []) {\n  if (!Array.isArray(list)) return [];\n  const out = [];\n  for (const item of list) {\n    const n = normalizeLocation(item);\n    if (n && !out.includes(n)) out.push(n);\n  }\n  return out;\n}\n"
    }
  ]
}